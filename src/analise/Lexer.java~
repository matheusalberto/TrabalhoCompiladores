/* The following code was generated by JFlex 1.6.1 */

package analise;

import static analise.Token.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Matheus/Desktop/TrabalhoCompiladores/src/analise/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\46\1\46\1\46\1\46\22\0\1\0\1\10\1\24"+
    "\2\0\1\4\1\7\1\0\1\24\1\24\1\5\1\4\1\24\1\4"+
    "\1\24\1\6\12\2\1\0\1\24\1\12\1\13\1\11\2\0\22\1"+
    "\1\45\7\1\1\24\1\0\1\24\1\0\1\1\1\0\1\21\1\33"+
    "\1\31\1\32\1\17\1\20\1\44\1\41\1\26\1\1\1\43\1\22"+
    "\1\36\1\35\1\30\1\25\1\1\1\15\1\23\1\14\1\16\1\27"+
    "\1\37\1\34\1\40\1\42\1\24\1\3\1\24\7\0\1\46\u1fa2\0"+
    "\1\46\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\5\2\4\2\6"+
    "\1\7\7\2\1\10\12\2\1\11\1\4\1\7\1\12"+
    "\1\4\1\6\24\2\1\13\10\2\1\13\40\2\1\13"+
    "\20\2\1\14\30\2\1\13\2\2\1\13\42\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u015f\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\47\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b"+
    "\0\116\0\47\0\47\0\47\0\47\0\u0492\0\u04b9\0\u04e0"+
    "\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618"+
    "\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750"+
    "\0\u0777\0\116\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861"+
    "\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999"+
    "\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1"+
    "\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09"+
    "\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41"+
    "\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79"+
    "\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1"+
    "\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\116\0\u1074\0\u109b\0\u10c2"+
    "\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa"+
    "\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332"+
    "\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u0ad1\0\u141c\0\u1443"+
    "\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b"+
    "\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3"+
    "\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb"+
    "\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923"+
    "\0\u194a\0\u1971\0\u1998";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\3\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\3\1\31\1\32\1\33\1\3\1\34\1\3\1\35"+
    "\4\3\1\36\1\37\51\0\3\3\10\0\10\3\1\0"+
    "\21\3\2\0\1\40\1\4\1\40\10\0\10\40\1\0"+
    "\21\40\2\0\2\3\1\41\10\0\10\3\1\0\21\3"+
    "\14\0\1\42\41\0\1\43\4\0\1\42\40\0\2\43"+
    "\4\0\1\42\42\0\1\44\52\0\1\45\44\0\1\45"+
    "\1\0\1\45\45\0\2\45\34\0\3\3\10\0\1\3"+
    "\1\46\6\3\1\0\14\3\1\47\4\3\2\0\3\3"+
    "\10\0\3\3\1\50\4\3\1\0\21\3\2\0\3\3"+
    "\10\0\6\3\1\51\1\3\1\0\7\3\1\52\11\3"+
    "\2\0\3\3\10\0\5\3\1\53\1\54\1\3\1\0"+
    "\1\3\1\55\1\3\1\56\15\3\2\0\3\3\10\0"+
    "\7\3\1\57\1\0\6\3\1\60\12\3\2\0\3\3"+
    "\10\0\10\3\1\0\3\3\1\61\15\3\2\0\3\3"+
    "\10\0\1\62\1\3\1\63\5\3\1\0\12\3\1\64"+
    "\1\65\1\66\4\3\2\0\3\3\10\0\1\3\1\67"+
    "\1\70\2\3\1\71\2\3\1\0\21\3\2\0\3\3"+
    "\10\0\4\3\1\72\3\3\1\0\10\3\1\73\1\74"+
    "\7\3\2\0\3\3\10\0\10\3\1\0\3\3\1\75"+
    "\15\3\2\0\3\3\10\0\5\3\1\76\1\77\1\3"+
    "\1\0\3\3\1\100\10\3\1\101\4\3\2\0\3\3"+
    "\10\0\3\3\1\102\4\3\1\0\3\3\1\103\15\3"+
    "\2\0\3\3\10\0\1\3\1\104\6\3\1\0\3\3"+
    "\1\105\7\3\1\106\5\3\2\0\3\3\10\0\2\3"+
    "\1\107\1\110\1\3\1\111\2\3\1\0\21\3\2\0"+
    "\3\3\10\0\10\3\1\0\14\3\1\112\4\3\2\0"+
    "\3\3\10\0\10\3\1\0\3\3\1\113\15\3\2\0"+
    "\3\3\10\0\1\114\7\3\1\0\21\3\2\0\3\40"+
    "\10\0\10\40\1\0\21\40\2\0\3\3\10\0\2\3"+
    "\1\115\2\3\1\116\2\3\1\0\13\3\1\72\5\3"+
    "\2\0\3\3\10\0\1\3\1\117\6\3\1\0\1\3"+
    "\1\120\17\3\2\0\3\3\10\0\1\121\7\3\1\0"+
    "\21\3\2\0\3\3\10\0\7\3\1\122\1\0\21\3"+
    "\2\0\3\3\10\0\1\123\7\3\1\0\21\3\2\0"+
    "\3\3\10\0\6\3\1\124\1\3\1\0\21\3\2\0"+
    "\3\3\10\0\10\3\1\0\3\3\1\125\15\3\2\0"+
    "\3\3\10\0\10\3\1\0\10\3\1\126\10\3\2\0"+
    "\3\3\10\0\1\3\1\72\6\3\1\0\21\3\2\0"+
    "\3\3\10\0\7\3\1\127\1\0\21\3\2\0\3\3"+
    "\10\0\7\3\1\130\1\0\21\3\2\0\3\3\10\0"+
    "\10\3\1\0\10\3\1\131\10\3\2\0\3\3\10\0"+
    "\1\3\1\132\3\3\1\133\2\3\1\0\21\3\2\0"+
    "\3\3\10\0\10\3\1\0\1\134\20\3\2\0\3\3"+
    "\10\0\10\3\1\0\1\3\1\135\17\3\2\0\3\3"+
    "\10\0\10\3\1\0\10\3\1\136\10\3\2\0\3\3"+
    "\10\0\10\3\1\0\3\3\1\137\15\3\2\0\3\3"+
    "\10\0\10\3\1\0\1\3\1\140\1\3\1\141\15\3"+
    "\2\0\3\3\10\0\10\3\1\0\6\3\1\142\12\3"+
    "\2\0\3\3\10\0\10\3\1\0\4\3\1\143\14\3"+
    "\2\0\3\3\10\0\1\144\6\3\1\145\1\0\21\3"+
    "\2\0\3\3\10\0\10\3\1\0\1\146\20\3\2\0"+
    "\3\3\10\0\6\3\1\147\1\3\1\0\1\3\1\150"+
    "\17\3\2\0\3\3\10\0\1\151\6\3\1\122\1\0"+
    "\21\3\2\0\3\3\10\0\5\3\1\152\2\3\1\0"+
    "\21\3\2\0\3\3\10\0\10\3\1\0\10\3\1\153"+
    "\10\3\2\0\3\3\10\0\5\3\1\56\2\3\1\0"+
    "\21\3\2\0\3\3\10\0\4\3\1\154\3\3\1\0"+
    "\21\3\2\0\3\3\10\0\2\3\1\155\5\3\1\0"+
    "\21\3\2\0\3\3\10\0\3\3\1\156\4\3\1\0"+
    "\21\3\2\0\3\3\10\0\10\3\1\0\3\3\1\157"+
    "\15\3\2\0\3\3\10\0\1\122\7\3\1\0\21\3"+
    "\2\0\3\3\10\0\6\3\1\160\1\3\1\0\21\3"+
    "\2\0\3\3\10\0\10\3\1\0\12\3\1\72\6\3"+
    "\2\0\3\3\10\0\1\161\7\3\1\0\21\3\2\0"+
    "\3\3\10\0\10\3\1\0\1\3\1\162\17\3\2\0"+
    "\3\3\10\0\1\163\7\3\1\0\21\3\2\0\3\3"+
    "\10\0\1\3\1\164\6\3\1\0\21\3\2\0\3\3"+
    "\10\0\3\3\1\165\4\3\1\0\21\3\2\0\3\3"+
    "\10\0\10\3\1\0\10\3\1\166\10\3\2\0\3\3"+
    "\10\0\10\3\1\0\3\3\1\167\15\3\2\0\3\3"+
    "\10\0\7\3\1\72\1\0\21\3\2\0\3\3\10\0"+
    "\2\3\1\170\5\3\1\0\21\3\2\0\3\3\10\0"+
    "\3\3\1\72\4\3\1\0\21\3\2\0\3\3\10\0"+
    "\3\3\1\171\4\3\1\0\21\3\2\0\3\3\10\0"+
    "\7\3\1\115\1\0\21\3\2\0\3\3\10\0\5\3"+
    "\1\172\2\3\1\0\21\3\2\0\3\3\10\0\5\3"+
    "\1\173\2\3\1\0\21\3\2\0\3\3\10\0\3\3"+
    "\1\137\4\3\1\0\21\3\2\0\3\3\10\0\1\174"+
    "\7\3\1\0\21\3\2\0\3\3\10\0\10\3\1\0"+
    "\17\3\1\72\1\3\2\0\3\3\10\0\10\3\1\0"+
    "\1\3\1\175\17\3\2\0\3\3\10\0\1\176\7\3"+
    "\1\0\21\3\2\0\3\3\10\0\3\3\1\56\4\3"+
    "\1\0\21\3\2\0\3\3\10\0\1\151\7\3\1\0"+
    "\21\3\2\0\3\3\10\0\10\3\1\0\4\3\1\177"+
    "\14\3\2\0\3\3\10\0\1\3\1\172\6\3\1\0"+
    "\21\3\2\0\3\3\10\0\10\3\1\0\2\3\1\200"+
    "\16\3\2\0\3\3\10\0\1\201\7\3\1\0\21\3"+
    "\2\0\3\3\10\0\6\3\1\176\1\3\1\0\21\3"+
    "\2\0\3\3\10\0\10\3\1\0\16\3\1\202\2\3"+
    "\2\0\3\3\10\0\3\3\1\203\4\3\1\0\21\3"+
    "\2\0\3\3\10\0\1\204\7\3\1\0\21\3\2\0"+
    "\3\3\10\0\6\3\1\205\1\3\1\0\3\3\1\137"+
    "\15\3\2\0\3\3\10\0\5\3\1\206\2\3\1\0"+
    "\21\3\2\0\3\3\10\0\10\3\1\0\5\3\1\72"+
    "\13\3\2\0\3\3\10\0\10\3\1\0\4\3\1\207"+
    "\14\3\2\0\3\3\10\0\7\3\1\120\1\0\21\3"+
    "\2\0\3\3\10\0\1\210\6\3\1\172\1\0\21\3"+
    "\2\0\3\3\10\0\5\3\1\211\2\3\1\0\21\3"+
    "\2\0\3\3\10\0\10\3\1\0\6\3\1\162\12\3"+
    "\2\0\3\3\10\0\5\3\1\212\2\3\1\0\21\3"+
    "\2\0\3\3\10\0\6\3\1\213\1\3\1\0\21\3"+
    "\2\0\3\3\10\0\6\3\1\72\1\3\1\0\21\3"+
    "\2\0\3\3\10\0\10\3\1\0\1\3\1\214\17\3"+
    "\2\0\3\3\10\0\6\3\1\122\1\3\1\0\21\3"+
    "\2\0\3\3\10\0\10\3\1\0\3\3\1\72\15\3"+
    "\2\0\3\3\10\0\10\3\1\0\1\3\1\61\17\3"+
    "\2\0\3\3\10\0\7\3\1\215\1\0\21\3\2\0"+
    "\3\3\10\0\10\3\1\0\12\3\1\216\6\3\2\0"+
    "\3\3\10\0\1\3\1\217\6\3\1\0\21\3\2\0"+
    "\3\3\10\0\10\3\1\0\10\3\1\220\10\3\2\0"+
    "\3\3\10\0\1\72\7\3\1\0\21\3\2\0\3\3"+
    "\10\0\6\3\1\221\1\3\1\0\21\3\2\0\3\3"+
    "\10\0\1\3\1\222\6\3\1\0\21\3\2\0\3\3"+
    "\10\0\10\3\1\0\4\3\1\223\14\3\2\0\3\3"+
    "\10\0\10\3\1\0\1\3\1\224\17\3\2\0\3\3"+
    "\10\0\10\3\1\0\14\3\1\225\4\3\2\0\3\3"+
    "\10\0\5\3\1\106\2\3\1\0\21\3\2\0\3\3"+
    "\10\0\3\3\1\226\4\3\1\0\21\3\2\0\3\3"+
    "\10\0\5\3\1\227\2\3\1\0\21\3\2\0\3\3"+
    "\10\0\1\3\1\230\6\3\1\0\21\3\2\0\3\3"+
    "\10\0\5\3\1\231\2\3\1\0\21\3\2\0\3\3"+
    "\10\0\3\3\1\232\4\3\1\0\21\3\2\0\3\3"+
    "\10\0\1\112\7\3\1\0\21\3\2\0\3\3\10\0"+
    "\10\3\1\0\14\3\1\72\4\3\2\0\3\3\10\0"+
    "\10\3\1\0\1\3\1\233\17\3\2\0\3\3\10\0"+
    "\2\3\1\234\5\3\1\0\21\3\2\0\3\3\10\0"+
    "\10\3\1\0\16\3\1\72\2\3\2\0\3\3\10\0"+
    "\3\3\1\235\4\3\1\0\21\3\2\0\3\3\10\0"+
    "\10\3\1\0\2\3\1\122\16\3\2\0\3\3\10\0"+
    "\10\3\1\0\1\3\1\236\17\3\2\0\3\3\10\0"+
    "\10\3\1\0\10\3\1\72\10\3\2\0\3\3\10\0"+
    "\10\3\1\0\5\3\1\120\13\3\2\0\3\3\10\0"+
    "\6\3\1\237\1\3\1\0\21\3\2\0\3\3\10\0"+
    "\5\3\1\240\2\3\1\0\21\3\2\0\3\3\10\0"+
    "\1\241\7\3\1\0\21\3\2\0\3\3\10\0\10\3"+
    "\1\0\4\3\1\72\14\3\2\0\3\3\10\0\1\3"+
    "\1\242\6\3\1\0\21\3\2\0\3\3\10\0\10\3"+
    "\1\0\4\3\1\243\14\3\2\0\3\3\10\0\10\3"+
    "\1\0\17\3\1\122\1\3\2\0\3\3\10\0\4\3"+
    "\1\244\3\3\1\0\21\3\2\0\3\3\10\0\10\3"+
    "\1\0\10\3\1\245\10\3\2\0\3\3\10\0\10\3"+
    "\1\0\11\3\1\246\7\3\2\0\3\3\10\0\10\3"+
    "\1\0\10\3\1\247\10\3\2\0\3\3\10\0\6\3"+
    "\1\172\1\3\1\0\21\3\2\0\3\3\10\0\5\3"+
    "\1\217\2\3\1\0\21\3\2\0\3\3\10\0\3\3"+
    "\1\250\4\3\1\0\21\3\2\0\3\3\10\0\10\3"+
    "\1\0\13\3\1\72\5\3\2\0\3\3\10\0\10\3"+
    "\1\0\4\3\1\172\14\3\2\0\3\3\10\0\4\3"+
    "\1\251\3\3\1\0\21\3\2\0\3\3\10\0\10\3"+
    "\1\0\3\3\1\252\15\3\2\0\3\3\10\0\1\253"+
    "\7\3\1\0\21\3\2\0\3\3\10\0\5\3\1\254"+
    "\2\3\1\0\21\3\2\0\3\3\10\0\10\3\1\0"+
    "\4\3\1\255\14\3\2\0\3\3\10\0\3\3\1\256"+
    "\4\3\1\0\21\3\2\0\3\3\10\0\2\3\1\122"+
    "\5\3\1\0\21\3\2\0\3\3\10\0\10\3\1\0"+
    "\10\3\1\172\10\3\2\0\3\3\10\0\10\3\1\0"+
    "\1\72\20\3\2\0\3\3\10\0\10\3\1\0\10\3"+
    "\1\257\10\3\2\0\3\3\10\0\3\3\1\150\4\3"+
    "\1\0\21\3\2\0\3\3\10\0\10\3\1\0\4\3"+
    "\1\122\14\3\2\0\3\3\10\0\3\3\1\260\4\3"+
    "\1\0\21\3\2\0\3\3\10\0\10\3\1\0\10\3"+
    "\1\261\10\3\2\0\3\3\10\0\10\3\1\0\1\3"+
    "\1\262\17\3\2\0\3\3\10\0\10\3\1\0\3\3"+
    "\1\263\15\3\2\0\3\3\10\0\1\120\7\3\1\0"+
    "\21\3\2\0\3\3\10\0\10\3\1\0\15\3\1\253"+
    "\3\3\2\0\3\3\10\0\4\3\1\72\3\3\1\0"+
    "\21\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6591];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\14\1\4\11\216\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 13: break;
          case 2: 
            { lexeme=yytext(); return ID;
            }
          case 14: break;
          case 3: 
            { lexeme=yytext(); return NUMERO;
            }
          case 15: break;
          case 4: 
            { lexeme = yytext(); return OPERADOR_LOGICO;
            }
          case 16: break;
          case 5: 
            { lexeme = yytext(); return OPERADOR_ARITMETICO;
            }
          case 17: break;
          case 6: 
            { lexeme = yytext(); return OP_RELACIONAL;
            }
          case 18: break;
          case 7: 
            { lexeme = yytext(); return OP_ATRIBUICAO;
            }
          case 19: break;
          case 8: 
            { lexeme = yytext(); return SEPARADOR;
            }
          case 20: break;
          case 9: 
            { lexeme=yytext(); return ERROR;
            }
          case 21: break;
          case 10: 
            { lexeme = yytext(); return COMENTARIO;
            }
          case 22: break;
          case 11: 
            { lexeme = yytext(); return PALAVRA;
            }
          case 23: break;
          case 12: 
            { lexeme=yytext(); return OP_BOOLEANO;
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
