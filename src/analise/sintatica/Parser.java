
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analise.sintatica;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\004\000\002\005\004\000" +
    "\002\037\004\000\002\006\004\000\002\006\005\000\002" +
    "\006\007\000\002\006\006\000\002\007\007\000\002\007" +
    "\010\000\002\007\014\000\002\007\013\000\002\010\004" +
    "\000\002\010\003\000\002\010\004\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\011\004\000\002" +
    "\012\003\000\002\012\006\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\040\012\000\002\040\011" +
    "\000\002\041\011\000\002\041\010\000\002\014\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\006\000\002\017\005" +
    "\000\002\020\011\000\002\020\012\000\002\021\006\000" +
    "\002\022\015\000\002\023\011\000\002\024\004\000\002" +
    "\025\007\000\002\026\007\000\002\026\006\000\002\027" +
    "\005\000\002\030\005\000\002\031\004\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\004\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\004\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\007\000\002\033\003\000\002\033\004\000\002\034\004" +
    "\000\002\035\004\000\002\035\006\000\002\036\005\000" +
    "\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\012\035\010\036\006\037\013\042\014\001" +
    "\002\000\004\002\311\001\002\000\014\002\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\042\ufffc\001\002\000\004\042\uffe5\001" +
    "\002\000\014\002\ufffd\035\ufffd\036\ufffd\037\ufffd\042\ufffd" +
    "\001\002\000\004\042\uffe4\001\002\000\014\002\ufffe\035" +
    "\010\036\006\037\013\042\014\001\002\000\004\002\000" +
    "\001\002\000\004\042\uffe6\001\002\000\004\045\276\001" +
    "\002\000\014\002\ufffb\035\ufffb\036\ufffb\037\ufffb\042\ufffb" +
    "\001\002\000\004\042\017\001\002\000\014\024\022\045" +
    "\023\047\026\053\025\054\024\001\002\000\014\002\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\042\ufffa\001\002\000\014\002" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\042\ufff9\001\002\000\020" +
    "\005\122\014\132\025\133\042\127\043\125\044\124\045" +
    "\123\001\002\000\012\035\010\036\006\037\013\046\056" +
    "\001\002\000\014\002\ufff7\035\ufff7\036\ufff7\037\ufff7\042" +
    "\ufff7\001\002\000\004\042\054\001\002\000\004\043\027" +
    "\001\002\000\004\050\030\001\002\000\010\024\031\053" +
    "\033\054\032\001\002\000\004\051\036\001\002\000\014" +
    "\002\ufff3\035\ufff3\036\ufff3\037\ufff3\042\ufff3\001\002\000" +
    "\004\042\034\001\002\000\004\047\026\001\002\000\014" +
    "\002\ufff2\035\ufff2\036\ufff2\037\ufff2\042\ufff2\001\002\000" +
    "\010\025\042\043\037\044\040\001\002\000\006\052\uffee" +
    "\053\044\001\002\000\006\052\uffea\053\044\001\002\000" +
    "\004\052\046\001\002\000\006\052\uffec\053\044\001\002" +
    "\000\004\052\uffed\001\002\000\010\025\042\043\037\044" +
    "\040\001\002\000\004\052\uffe9\001\002\000\006\053\047" +
    "\054\050\001\002\000\004\042\034\001\002\000\014\002" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\042\ufff0\001\002\000\014" +
    "\002\ufff1\035\ufff1\036\ufff1\037\ufff1\042\ufff1\001\002\000" +
    "\004\052\uffeb\001\002\000\004\052\uffef\001\002\000\010" +
    "\024\022\053\025\054\024\001\002\000\014\002\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\042\ufff6\001\002\000\004\051\267" +
    "\001\002\000\004\042\264\001\002\000\004\046\064\001" +
    "\002\000\006\046\uffaa\053\062\001\002\000\010\035\010" +
    "\036\006\037\013\001\002\000\004\046\uffab\001\002\000" +
    "\004\051\065\001\002\000\030\027\104\031\112\032\076" +
    "\033\074\034\072\035\010\036\006\037\013\040\077\041" +
    "\070\042\100\001\002\000\022\027\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\040\uffdc\041\uffdc\042\uffdc\001\002\000" +
    "\004\052\uffc7\001\002\000\004\042\100\001\002\000\004" +
    "\042\261\001\002\000\004\045\253\001\002\000\004\024" +
    "\250\001\002\000\004\047\244\001\002\000\004\052\243" +
    "\001\002\000\004\045\230\001\002\000\020\005\122\014" +
    "\132\025\133\042\127\043\125\044\124\045\123\001\002" +
    "\000\010\024\uffe8\047\174\054\uffe8\001\002\000\010\035" +
    "\010\036\006\037\013\001\002\000\022\027\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\040\uffda\041\uffda\042\uffda\001" +
    "\002\000\024\027\104\031\112\032\076\033\074\034\072" +
    "\040\077\041\070\042\100\052\uffc8\001\002\000\004\054" +
    "\223\001\002\000\022\027\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\040\uffde\041\uffde\042\uffde\001\002\000\022\027" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\001\002\000\022\027\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\040\uffdb\041\uffdb\042\uffdb\001\002\000\022" +
    "\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\001\002\000\022\027\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\040\uffdd\041\uffdd\042\uffdd\001\002\000" +
    "\004\045\116\001\002\000\022\027\104\031\112\032\076" +
    "\033\074\034\072\040\077\041\070\042\100\001\002\000" +
    "\022\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\001\002\000\004\052\uffdf\001\002\000" +
    "\004\042\100\001\002\000\004\024\221\001\002\000\004" +
    "\054\121\001\002\000\020\005\122\014\132\025\133\042" +
    "\127\043\125\044\124\045\123\001\002\000\020\005\122" +
    "\014\132\025\133\042\127\043\125\044\124\045\123\001" +
    "\002\000\020\005\122\014\132\025\133\042\127\043\125" +
    "\044\124\045\123\001\002\000\050\004\uffc5\005\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\026\uffc5\046" +
    "\uffc5\050\uffc5\053\uffc5\054\uffc5\001\002\000\050\004\uffc6" +
    "\005\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\026\uffc6\046\uffc6\050\uffc6\053\uffc6\054\uffc6\001\002\000" +
    "\040\004\135\005\137\007\145\010\144\011\143\012\151" +
    "\013\136\015\147\016\140\017\141\020\146\021\150\022" +
    "\142\023\152\054\210\001\002\000\054\004\uffe8\005\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\026\uffe8" +
    "\045\173\046\uffe8\047\174\050\uffe8\053\uffe8\054\uffe8\001" +
    "\002\000\050\004\uffc3\005\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\026\uffc3\046\uffc3\050\uffc3\053\uffc3" +
    "\054\uffc3\001\002\000\050\004\uffc2\005\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2\046\uffc2\050" +
    "\uffc2\053\uffc2\054\uffc2\001\002\000\020\005\122\014\132" +
    "\025\133\042\127\043\125\044\124\045\123\001\002\000" +
    "\050\004\uffc4\005\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\026\uffc4\046\uffc4\050\uffc4\053\uffc4\054\uffc4" +
    "\001\002\000\050\004\uffc1\005\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\026\uffc1\046\uffc1\050\uffc1\053" +
    "\uffc1\054\uffc1\001\002\000\020\005\122\014\132\025\133" +
    "\042\127\043\125\044\124\045\123\001\002\000\020\005" +
    "\122\014\132\025\133\042\127\043\125\044\124\045\123" +
    "\001\002\000\020\005\122\014\132\025\133\042\127\043" +
    "\125\044\124\045\123\001\002\000\020\005\122\014\132" +
    "\025\133\042\127\043\125\044\124\045\123\001\002\000" +
    "\020\005\122\014\132\025\133\042\127\043\125\044\124" +
    "\045\123\001\002\000\020\005\122\014\132\025\133\042" +
    "\127\043\125\044\124\045\123\001\002\000\020\005\122" +
    "\014\132\025\133\042\127\043\125\044\124\045\123\001" +
    "\002\000\020\005\122\014\132\025\133\042\127\043\125" +
    "\044\124\045\123\001\002\000\020\005\122\014\132\025" +
    "\133\042\127\043\125\044\124\045\123\001\002\000\020" +
    "\005\122\014\132\025\133\042\127\043\125\044\124\045" +
    "\123\001\002\000\020\005\122\014\132\025\133\042\127" +
    "\043\125\044\124\045\123\001\002\000\020\005\122\014" +
    "\132\025\133\042\127\043\125\044\124\045\123\001\002" +
    "\000\020\005\122\014\132\025\133\042\127\043\125\044" +
    "\124\045\123\001\002\000\020\005\122\014\132\025\133" +
    "\042\127\043\125\044\124\045\123\001\002\000\050\004" +
    "\135\005\137\007\145\010\144\011\143\012\uffb4\013\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\026\uffb4\046\uffb4\050\uffb4\053\uffb4\054\uffb4\001\002" +
    "\000\050\004\135\005\137\007\145\010\144\011\143\012" +
    "\uffb9\013\136\015\uffb9\016\140\017\141\020\146\021\150" +
    "\022\142\023\152\026\uffb9\046\uffb9\050\uffb9\053\uffb9\054" +
    "\uffb9\001\002\000\050\004\135\005\137\007\145\010\144" +
    "\011\143\012\uffb2\013\uffb2\015\uffb2\016\140\017\141\020" +
    "\uffb2\021\uffb2\022\142\023\152\026\uffb2\046\uffb2\050\uffb2" +
    "\053\uffb2\054\uffb2\001\002\000\040\004\135\005\137\007" +
    "\145\010\144\011\143\012\151\013\136\015\147\016\140" +
    "\017\141\020\146\021\150\022\142\023\152\026\157\001" +
    "\002\000\020\005\122\014\132\025\133\042\127\043\125" +
    "\044\124\045\123\001\002\000\050\004\135\005\137\007" +
    "\145\010\144\011\143\012\151\013\136\015\147\016\140" +
    "\017\141\020\146\021\150\022\142\023\152\026\uffb1\046" +
    "\uffb1\050\uffb1\053\uffb1\054\uffb1\001\002\000\050\004\135" +
    "\005\137\007\145\010\144\011\143\012\uffb3\013\uffb3\015" +
    "\uffb3\016\140\017\141\020\uffb3\021\uffb3\022\142\023\152" +
    "\026\uffb3\046\uffb3\050\uffb3\053\uffb3\054\uffb3\001\002\000" +
    "\050\004\uffbd\005\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\026\uffbd\046\uffbd\050\uffbd\053\uffbd\054\uffbd" +
    "\001\002\000\050\004\uffbc\005\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\026\uffbc\046\uffbc\050\uffbc\053" +
    "\uffbc\054\uffbc\001\002\000\050\004\uffbb\005\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\026\uffbb\046\uffbb" +
    "\050\uffbb\053\uffbb\054\uffbb\001\002\000\050\004\135\005" +
    "\137\007\145\010\144\011\143\012\uffb5\013\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\026" +
    "\uffb5\046\uffb5\050\uffb5\053\uffb5\054\uffb5\001\002\000\050" +
    "\004\135\005\137\007\145\010\144\011\143\012\uffb6\013" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\026\uffb6\046\uffb6\050\uffb6\053\uffb6\054\uffb6\001" +
    "\002\000\050\004\135\005\137\007\145\010\144\011\143" +
    "\012\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\026\uffb7\046\uffb7\050\uffb7\053\uffb7" +
    "\054\uffb7\001\002\000\050\004\uffbe\005\uffbe\007\145\010" +
    "\144\011\143\012\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026\uffbe\046\uffbe\050" +
    "\uffbe\053\uffbe\054\uffbe\001\002\000\050\004\135\005\137" +
    "\007\145\010\144\011\143\012\uffb8\013\uffb8\015\uffb8\016" +
    "\140\017\141\020\146\021\150\022\142\023\152\026\uffb8" +
    "\046\uffb8\050\uffb8\053\uffb8\054\uffb8\001\002\000\050\004" +
    "\uffbf\005\uffbf\007\145\010\144\011\143\012\uffbf\013\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\026\uffbf\046\uffbf\050\uffbf\053\uffbf\054\uffbf\001\002" +
    "\000\022\005\122\014\132\025\133\042\127\043\125\044" +
    "\124\045\123\046\201\001\002\000\020\005\122\014\132" +
    "\025\133\042\127\043\125\044\124\045\123\001\002\000" +
    "\040\004\135\005\137\007\145\010\144\011\143\012\151" +
    "\013\136\015\147\016\140\017\141\020\146\021\150\022" +
    "\142\023\152\050\176\001\002\000\052\004\uffe7\005\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\026\uffe7\046\uffe7\050\uffe7\053\uffe7\054\uffe7\001\002\000" +
    "\004\046\206\001\002\000\044\004\135\005\137\007\145" +
    "\010\144\011\143\012\151\013\136\015\147\016\140\017" +
    "\141\020\146\021\150\022\142\023\152\046\uffb0\053\203" +
    "\054\uffb0\001\002\000\004\054\202\001\002\000\050\004" +
    "\uffcc\005\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\026\uffcc\046\uffcc\050\uffcc\053\uffcc\054\uffcc\001\002" +
    "\000\020\005\122\014\132\025\133\042\127\043\125\044" +
    "\124\045\123\001\002\000\006\046\uffaf\054\uffaf\001\002" +
    "\000\006\046\uffae\054\uffae\001\002\000\004\054\207\001" +
    "\002\000\050\004\uffcd\005\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\026\uffcd\046\uffcd\050\uffcd\053\uffcd" +
    "\054\uffcd\001\002\000\004\042\100\001\002\000\004\046" +
    "\212\001\002\000\004\051\213\001\002\000\030\027\104" +
    "\031\112\032\076\033\074\034\072\035\010\036\006\037" +
    "\013\040\077\041\070\042\100\001\002\000\004\052\215" +
    "\001\002\000\022\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002\000\040\004\135" +
    "\005\137\007\145\010\144\011\143\012\151\013\136\015" +
    "\147\016\140\017\141\020\146\021\150\022\142\023\152" +
    "\046\217\001\002\000\050\004\uffc0\005\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\026\uffc0\046\uffc0\050" +
    "\uffc0\053\uffc0\054\uffc0\001\002\000\050\004\uffba\005\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\026\uffba" +
    "\046\uffba\050\uffba\053\uffba\054\uffba\001\002\000\020\005" +
    "\122\014\132\025\133\042\127\043\125\044\124\045\123" +
    "\001\002\000\040\004\135\005\137\007\145\010\144\011" +
    "\143\012\151\013\136\015\147\016\140\017\141\020\146" +
    "\021\150\022\142\023\152\054\uffd5\001\002\000\022\027" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\001\002\000\004\052\uffc9\001\002\000\024\027" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\052\ufff8\001\002\000\004\054\227\001\002\000" +
    "\022\027\uffca\031\uffca\032\uffca\033\uffca\034\uffca\040\uffca" +
    "\041\uffca\042\uffca\001\002\000\020\005\122\014\132\025" +
    "\133\042\127\043\125\044\124\045\123\001\002\000\040" +
    "\004\135\005\137\007\145\010\144\011\143\012\151\013" +
    "\136\015\147\016\140\017\141\020\146\021\150\022\142" +
    "\023\152\046\232\001\002\000\004\051\233\001\002\000" +
    "\030\027\104\031\112\032\076\033\074\034\072\035\010" +
    "\036\006\037\013\040\077\041\070\042\100\001\002\000" +
    "\004\052\235\001\002\000\024\027\uffd4\030\236\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\040\uffd4\041\uffd4\042\uffd4\001" +
    "\002\000\004\051\240\001\002\000\022\027\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\040\uffd3\041\uffd3\042\uffd3\001" +
    "\002\000\030\027\104\031\112\032\076\033\074\034\072" +
    "\035\010\036\006\037\013\040\077\041\070\042\100\001" +
    "\002\000\004\052\242\001\002\000\022\027\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\040\uffd2\041\uffd2\042\uffd2\001" +
    "\002\000\014\002\uffe3\035\uffe3\036\uffe3\037\uffe3\042\uffe3" +
    "\001\002\000\020\005\122\014\132\025\133\042\127\043" +
    "\125\044\124\045\123\001\002\000\040\004\135\005\137" +
    "\007\145\010\144\011\143\012\151\013\136\015\147\016" +
    "\140\017\141\020\146\021\150\022\142\023\152\050\246" +
    "\001\002\000\004\054\247\001\002\000\022\027\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\040\uffce\041\uffce\042\uffce" +
    "\001\002\000\020\005\122\014\132\025\133\042\127\043" +
    "\125\044\124\045\123\001\002\000\040\004\135\005\137" +
    "\007\145\010\144\011\143\012\151\013\136\015\147\016" +
    "\140\017\141\020\146\021\150\022\142\023\152\054\252" +
    "\001\002\000\024\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\046\uffd6\001\002\000\020" +
    "\005\122\014\132\025\133\042\127\043\125\044\124\045" +
    "\123\001\002\000\040\004\135\005\137\007\145\010\144" +
    "\011\143\012\151\013\136\015\147\016\140\017\141\020" +
    "\146\021\150\022\142\023\152\046\255\001\002\000\004" +
    "\051\256\001\002\000\030\027\104\031\112\032\076\033" +
    "\074\034\072\035\010\036\006\037\013\040\077\041\070" +
    "\042\100\001\002\000\004\052\260\001\002\000\022\027" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\001\002\000\012\024\022\047\026\053\025\054" +
    "\024\001\002\000\004\054\263\001\002\000\022\027\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\001\002\000\010\045\265\046\uffad\053\uffad\001\002" +
    "\000\004\046\266\001\002\000\006\046\uffac\053\uffac\001" +
    "\002\000\030\027\104\031\112\032\076\033\074\034\072" +
    "\035\010\036\006\037\013\040\077\041\070\042\100\001" +
    "\002\000\004\052\271\001\002\000\014\002\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\042\uffe2\001\002\000\042\004\135\005" +
    "\137\007\145\010\144\011\143\012\151\013\136\015\147" +
    "\016\140\017\141\020\146\021\150\022\142\023\152\053" +
    "\273\054\274\001\002\000\004\042\054\001\002\000\014" +
    "\002\ufff4\035\ufff4\036\ufff4\037\ufff4\042\ufff4\001\002\000" +
    "\014\002\ufff5\035\ufff5\036\ufff5\037\ufff5\042\ufff5\001\002" +
    "\000\012\035\010\036\006\037\013\046\277\001\002\000" +
    "\004\051\305\001\002\000\004\046\301\001\002\000\004" +
    "\051\302\001\002\000\030\027\104\031\112\032\076\033" +
    "\074\034\072\035\010\036\006\037\013\040\077\041\070" +
    "\042\100\001\002\000\004\052\304\001\002\000\014\002" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\042\uffe1\001\002\000\030" +
    "\027\104\031\112\032\076\033\074\034\072\035\010\036" +
    "\006\037\013\040\077\041\070\042\100\001\002\000\004" +
    "\052\307\001\002\000\014\002\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\042\uffe0\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\020\002\003\003\011\004\010\005\006\013" +
    "\015\040\004\041\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\307\004\010\005\006\013\015\040\004" +
    "\041\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\017\007\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\127\026\130\032\271\001\001\000\010" +
    "\013\056\035\060\036\057\001\001\000\002\001\001\000" +
    "\004\006\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\040\001\001\000\004\011\052\001\001\000" +
    "\004\011\051\001\001\000\002\001\001\000\004\011\042" +
    "\001\001\000\002\001\001\000\004\010\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\056\035\060\036\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\100\012\072\013" +
    "\070\014\066\015\112\016\106\020\104\022\110\023\065" +
    "\024\113\025\101\027\105\030\107\031\074\037\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\261" +
    "\001\001\000\006\006\017\007\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\127\026\130\032\177\033" +
    "\225\001\001\000\002\001\001\000\010\005\100\013\070" +
    "\037\224\001\001\000\002\001\001\000\030\012\072\014" +
    "\223\015\112\016\106\020\104\022\110\023\065\024\113" +
    "\025\101\027\105\030\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\072\014\114\015\112\016\106\020\104\022\110\023\065" +
    "\024\113\025\101\027\105\030\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\116\017\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\127\026" +
    "\130\032\125\001\001\000\010\012\127\026\130\032\217" +
    "\001\001\000\010\012\127\026\130\032\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\127\026\130\032\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\127\026\130\032\171\001\001\000" +
    "\010\012\127\026\130\032\170\001\001\000\010\012\127" +
    "\026\130\032\167\001\001\000\010\012\127\026\130\032" +
    "\166\001\001\000\010\012\127\026\130\032\165\001\001" +
    "\000\010\012\127\026\130\032\164\001\001\000\010\012" +
    "\127\026\130\032\163\001\001\000\010\012\127\026\130" +
    "\032\162\001\001\000\010\012\127\026\130\032\161\001" +
    "\001\000\010\012\127\026\130\032\160\001\001\000\010" +
    "\012\127\026\130\032\155\001\001\000\010\012\127\026" +
    "\130\032\154\001\001\000\010\012\127\026\130\032\153" +
    "\001\001\000\010\012\127\026\130\032\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\127\026\130\032\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\127\026\130\032\177\033" +
    "\176\001\001\000\010\012\127\026\130\032\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\127\026\130\032\177\033\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\072\016\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\100\012\072\013\070" +
    "\014\066\015\112\016\106\020\104\022\110\023\065\024" +
    "\113\025\101\027\105\030\107\031\213\037\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\127\026\130" +
    "\032\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\127\026\130\032\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\100\012\072" +
    "\013\070\014\066\015\112\016\106\020\104\022\110\023" +
    "\065\024\113\025\101\027\105\030\107\031\233\037\102" +
    "\001\001\000\002\001\001\000\004\021\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\100\012\072" +
    "\013\070\014\066\015\112\016\106\020\104\022\110\023" +
    "\065\024\113\025\101\027\105\030\107\031\240\037\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\127\026\130\032\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\127\026\130\032\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\127\026\130\032\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\100\012\072" +
    "\013\070\014\066\015\112\016\106\020\104\022\110\023" +
    "\065\024\113\025\101\027\105\030\107\031\256\037\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\100\012" +
    "\072\013\070\014\066\015\112\016\106\020\104\022\110" +
    "\023\065\024\113\025\101\027\105\030\107\031\267\037" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\056\035\060\036\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\100\012\072\013\070\014\066\015\112\016\106" +
    "\020\104\022\110\023\065\024\113\025\101\027\105\030" +
    "\107\031\302\037\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\100\012\072\013\070\014\066\015" +
    "\112\016\106\020\104\022\110\023\065\024\113\025\101" +
    "\027\105\030\107\031\305\037\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaracoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracoes ::= declaracao declaracoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracoes ::= declaracao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracao ::= decVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracao ::= declaracaoFuncao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracao ::= declaracaoProcedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decVar ::= tipo sequenciaID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decVar ::= tipo sequenciaVETOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decVarList ::= decVar decVarList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVarList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sequenciaID ::= ID PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sequenciaID ::= ID VIRGULA sequenciaID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sequenciaID ::= ID OPERADOR_ATRIBUICAO expressao VIRGULA sequenciaID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sequenciaID ::= ID OPERADOR_ATRIBUICAO expressao PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sequenciaVETOR ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaVETOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sequenciaVETOR ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES VIRGULA sequenciaVETOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaVETOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sequenciaVETOR ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES OPERADOR_ATRIBUICAO ABRECHAVES expressaoVETOR FECHACHAVES VIRGULA sequenciaVETOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaVETOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sequenciaVETOR ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES OPERADOR_ATRIBUICAO ABRECHAVES expressaoVETOR FECHACHAVES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaVETOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressaoVETOR ::= NUMERO virgulaOuVazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressaoVETOR ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressaoVETOR ::= OPERADOR_BOOLEANO virgulaOuVazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressaoVETOR ::= OPERADOR_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressaoVETOR ::= STRING virgulaOuVazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressaoVETOR ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // virgulaOuVazio ::= VIRGULA expressaoVETOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virgulaOuVazio",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variavel ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variavel ::= ID ABRECOLCHETES expressao FECHACOLCHETES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= TIPO_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracaoFuncao ::= tipo ID ABREPARENTESES seqParametro FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoFuncao",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracaoFuncao ::= tipo ID ABREPARENTESES FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoFuncao",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracaoProcedimento ::= ID ABREPARENTESES seqParametro FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoProcedimento",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracaoProcedimento ::= ID ABREPARENTESES FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoProcedimento",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comandos ::= comando comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comando ::= comandoIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comando ::= comandoFor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comando ::= comandoWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando ::= comandoAtribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comando ::= retornoSubprograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comando ::= interrupcaoDeLaco 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comando ::= read 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comando ::= write 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comandoAtribuicao ::= variavel OPERADOR_ATRIBUICAO expressao PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicao",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comandoAtribuicaoFor ::= variavel OPERADOR_ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicaoFor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comandoIf ::= IF ABREPARENTESES expressao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoIf",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comandoIf ::= IF ABREPARENTESES expressao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoIf",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else ::= ELSE ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comandoFor ::= FOR ABREPARENTESES comandoAtribuicaoFor PONTOEVIRGULA expressao PONTOEVIRGULA comandoAtribuicao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoFor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comandoWhile ::= WHILE ABREPARENTESES expressao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoWhile",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // interrupcaoDeLaco ::= BREAK PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interrupcaoDeLaco",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // retornoSubprograma ::= RETURN ABRECOLCHETES expressao FECHACOLCHETES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoSubprograma",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // chamada ::= ID ABREPARENTESES parametroChamada FECHAPARENTESES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // chamada ::= ID ABREPARENTESES FECHAPARENTESES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // read ::= READ variavel PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // write ::= WRITE parametroChamada PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloco ::= decVarList comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloco ::= decVarList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloco ::= comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expressao ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expressao ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expressao ::= OPERADOR_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressao ::= variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expressao ::= chamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expressao ::= NEGACAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expressao ::= ABREPARENTESES expressao FECHAPARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expressao ::= expressao MAIS expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expressao ::= expressao MENOS expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expressao ::= expressao DIVIDIR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expressao ::= expressao MULTIPLICAR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expressao ::= expressao MOD expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expressao ::= MENOS expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expressao ::= expressao OR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expressao ::= expressao AND expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expressao ::= expressao MAIOR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expressao ::= expressao MENOR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expressao ::= expressao MAIOR_IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expressao ::= expressao MENOR_IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expressao ::= expressao IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expressao ::= expressao DIFERENTE expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expressao ::= expressao INTERROGACAO expressao DOIS_PONTOS expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametroChamada ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroChamada",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametroChamada ::= expressao auxiliarParametroChamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroChamada",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // auxiliarParametroChamada ::= VIRGULA parametroChamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("auxiliarParametroChamada",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametro ::= tipo ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametro ::= tipo ID ABREPARENTESES FECHAPARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // seqParametro ::= parametro VIRGULA seqParametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqParametro",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // seqParametro ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqParametro",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
