
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analise.sintatica;

import analise.semantica.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\012" +
    "\000\002\004\011\000\002\005\011\000\002\005\010\000" +
    "\002\006\005\000\002\007\003\000\002\007\005\000\002" +
    "\007\006\000\002\007\012\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\004\000\002\011\006" +
    "\000\002\012\004\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\004\000\002\013\004\000\002\014\011" +
    "\000\002\014\015\000\002\015\011\000\002\016\015\000" +
    "\002\017\004\000\002\020\005\000\002\021\005\000\002" +
    "\022\004\000\002\022\005\000\002\023\006\000\002\023" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\025\003\000\002\025\006\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\004\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\007\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\005\000" +
    "\002\030\003\000\002\031\005\000\002\031\003\000\002" +
    "\032\004\000\002\032\003\000\002\033\004\000\002\033" +
    "\003\000\002\034\004\000\002\034\003\000\002\035\004" +
    "\000\002\035\003\000\002\036\005\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\012\005\014\010\010\011\006\012\013\001" +
    "\002\000\004\002\275\001\002\000\014\002\ufffe\005\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\001\002\000\004\005\ufff2\001" +
    "\002\000\014\002\uffff\005\uffff\010\uffff\011\uffff\012\uffff" +
    "\001\002\000\004\005\ufff1\001\002\000\014\002\uffb1\005" +
    "\014\010\010\011\006\012\013\001\002\000\004\002\000" +
    "\001\002\000\004\005\ufff3\001\002\000\004\052\262\001" +
    "\002\000\014\002\ufffd\005\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\001\002\000\004\005\017\001\002\000\014\040\025\052" +
    "\044\054\026\060\ufff7\061\ufff7\001\002\000\004\061\043" +
    "\001\002\000\006\060\022\061\uffb5\001\002\000\004\005" +
    "\023\001\002\000\012\040\025\054\026\060\ufff7\061\ufff7" +
    "\001\002\000\004\061\uffb6\001\002\000\010\004\037\006" +
    "\033\007\034\001\002\000\004\006\027\001\002\000\004" +
    "\055\030\001\002\000\010\040\031\060\ufff5\061\ufff5\001" +
    "\002\000\004\056\032\001\002\000\010\004\037\006\033" +
    "\007\034\001\002\000\060\004\uffbb\006\uffbb\007\uffbb\013" +
    "\uffbb\014\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\041\uffbb\053\uffbb\055\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\001\002\000\060\004\uffba\006\uffba\007\uffba\013\uffba\014" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\041" +
    "\uffba\053\uffba\055\uffba\057\uffba\060\uffba\061\uffba\001\002" +
    "\000\012\004\037\006\033\007\034\057\uffad\001\002\000" +
    "\004\057\040\001\002\000\060\004\uffb9\006\uffb9\007\uffb9" +
    "\013\uffb9\014\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\041\uffb9\053\uffb9\055\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\001\002\000\006\060\ufff4\061\ufff4\001\002\000\004" +
    "\057\uffae\001\002\000\006\060\ufff6\061\ufff6\001\002\000" +
    "\034\002\ufff8\005\ufff8\010\ufff8\011\ufff8\012\ufff8\042\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\057" +
    "\ufff8\001\002\000\012\010\010\011\006\012\013\053\045" +
    "\001\002\000\004\056\257\001\002\000\004\005\254\001" +
    "\002\000\006\053\uffb7\060\252\001\002\000\004\053\051" +
    "\001\002\000\004\056\052\001\002\000\030\005\065\010" +
    "\010\011\006\012\013\042\072\044\100\045\063\046\061" +
    "\047\057\050\064\051\055\001\002\000\004\057\uffec\001" +
    "\002\000\024\005\uffe9\042\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\057\uffe9\001\002\000\004\005" +
    "\105\001\002\000\004\005\023\001\002\000\004\052\242" +
    "\001\002\000\016\033\231\034\230\035\227\036\232\037" +
    "\226\040\233\001\002\000\022\004\037\005\065\006\033" +
    "\007\034\014\110\023\116\052\111\061\224\001\002\000" +
    "\004\057\222\001\002\000\004\052\210\001\002\000\020" +
    "\004\037\005\065\006\033\007\034\014\110\023\116\052" +
    "\111\001\002\000\070\013\uffd1\014\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\052\177\053\uffd1\054" +
    "\167\055\uffd1\060\uffd1\061\uffd1\001\002\000\032\005\uffb3" +
    "\010\010\011\006\012\013\042\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\057\uffb3\001\002\000\004" +
    "\061\175\001\002\000\024\005\uffe8\042\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\057\uffe8\001\002" +
    "\000\024\005\065\042\072\044\100\045\063\046\061\047" +
    "\057\050\064\051\055\057\uffed\001\002\000\004\061\173" +
    "\001\002\000\024\005\uffeb\042\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\057\uffeb\001\002\000\024" +
    "\005\uffe6\042\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\057\uffe6\001\002\000\004\061\172\001\002" +
    "\000\024\005\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\057\uffe5\001\002\000\024\005\uffea" +
    "\042\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\057\uffea\001\002\000\004\052\104\001\002\000\024" +
    "\005\065\042\072\044\100\045\063\046\061\047\057\050" +
    "\064\051\055\057\uffaf\001\002\000\024\005\uffe7\042\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\057" +
    "\uffe7\001\002\000\004\057\uffb0\001\002\000\004\005\105" +
    "\001\002\000\022\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\054\167\061\uffd1\001\002\000\004\061\107" +
    "\001\002\000\020\004\037\005\065\006\033\007\034\014" +
    "\110\023\116\052\111\001\002\000\020\004\037\005\065" +
    "\006\033\007\034\014\110\023\116\052\111\001\002\000" +
    "\020\004\037\005\065\006\033\007\034\014\110\023\116" +
    "\052\111\001\002\000\040\013\120\014\123\016\130\017" +
    "\127\020\126\021\135\022\121\024\132\025\122\026\124" +
    "\027\131\030\133\031\125\032\134\061\156\001\002\000" +
    "\050\013\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\041\uffce\053\uffce\055\uffce\060\uffce\061\uffce" +
    "\001\002\000\050\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\041\uffcf\053\uffcf\055\uffcf\060" +
    "\uffcf\061\uffcf\001\002\000\050\013\uffcd\014\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\041\uffcd\053\uffcd" +
    "\055\uffcd\060\uffcd\061\uffcd\001\002\000\020\004\037\005" +
    "\065\006\033\007\034\014\110\023\116\052\111\001\002" +
    "\000\050\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\041\uffcc\053\uffcc\055\uffcc\060\uffcc\061" +
    "\uffcc\001\002\000\020\004\037\005\065\006\033\007\034" +
    "\014\110\023\116\052\111\001\002\000\020\004\037\005" +
    "\065\006\033\007\034\014\110\023\116\052\111\001\002" +
    "\000\020\004\037\005\065\006\033\007\034\014\110\023" +
    "\116\052\111\001\002\000\020\004\037\005\065\006\033" +
    "\007\034\014\110\023\116\052\111\001\002\000\020\004" +
    "\037\005\065\006\033\007\034\014\110\023\116\052\111" +
    "\001\002\000\020\004\037\005\065\006\033\007\034\014" +
    "\110\023\116\052\111\001\002\000\020\004\037\005\065" +
    "\006\033\007\034\014\110\023\116\052\111\001\002\000" +
    "\020\004\037\005\065\006\033\007\034\014\110\023\116" +
    "\052\111\001\002\000\020\004\037\005\065\006\033\007" +
    "\034\014\110\023\116\052\111\001\002\000\020\004\037" +
    "\005\065\006\033\007\034\014\110\023\116\052\111\001" +
    "\002\000\020\004\037\005\065\006\033\007\034\014\110" +
    "\023\116\052\111\001\002\000\020\004\037\005\065\006" +
    "\033\007\034\014\110\023\116\052\111\001\002\000\020" +
    "\004\037\005\065\006\033\007\034\014\110\023\116\052" +
    "\111\001\002\000\020\004\037\005\065\006\033\007\034" +
    "\014\110\023\116\052\111\001\002\000\050\013\120\014" +
    "\123\016\130\017\127\020\126\021\uffc4\022\121\024\uffc4" +
    "\025\122\026\124\027\131\030\133\031\125\032\134\041" +
    "\uffc4\053\uffc4\055\uffc4\060\uffc4\061\uffc4\001\002\000\050" +
    "\013\120\014\123\016\130\017\127\020\126\021\uffbf\022" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\041\uffbf\053\uffbf\055\uffbf\060\uffbf\061\uffbf\001" +
    "\002\000\050\013\120\014\123\016\130\017\127\020\126" +
    "\021\uffbd\022\uffbd\024\uffbd\025\122\026\124\027\uffbd\030" +
    "\uffbd\031\125\032\134\041\uffbd\053\uffbd\055\uffbd\060\uffbd" +
    "\061\uffbd\001\002\000\040\013\120\014\123\016\130\017" +
    "\127\020\126\021\135\022\121\024\132\025\122\026\124" +
    "\027\131\030\133\031\125\032\134\041\142\001\002\000" +
    "\020\004\037\005\065\006\033\007\034\014\110\023\116" +
    "\052\111\001\002\000\050\013\120\014\123\016\130\017" +
    "\127\020\126\021\135\022\121\024\132\025\122\026\124" +
    "\027\131\030\133\031\125\032\134\041\uffbc\053\uffbc\055" +
    "\uffbc\060\uffbc\061\uffbc\001\002\000\050\013\120\014\123" +
    "\016\130\017\127\020\126\021\uffbe\022\uffbe\024\uffbe\025" +
    "\122\026\124\027\uffbe\030\uffbe\031\125\032\134\041\uffbe" +
    "\053\uffbe\055\uffbe\060\uffbe\061\uffbe\001\002\000\050\013" +
    "\uffc8\014\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\041\uffc8\053\uffc8\055\uffc8\060\uffc8\061\uffc8\001\002" +
    "\000\050\013\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\041\uffc7\053\uffc7\055\uffc7\060\uffc7\061" +
    "\uffc7\001\002\000\050\013\uffc6\014\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\041\uffc6\053\uffc6\055\uffc6" +
    "\060\uffc6\061\uffc6\001\002\000\050\013\120\014\123\016" +
    "\130\017\127\020\126\021\uffc0\022\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\041\uffc0\053" +
    "\uffc0\055\uffc0\060\uffc0\061\uffc0\001\002\000\050\013\120" +
    "\014\123\016\130\017\127\020\126\021\uffc1\022\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\041\uffc1\053\uffc1\055\uffc1\060\uffc1\061\uffc1\001\002\000" +
    "\050\013\uffc9\014\uffc9\016\130\017\127\020\126\021\uffc9" +
    "\022\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\041\uffc9\053\uffc9\055\uffc9\060\uffc9\061\uffc9" +
    "\001\002\000\050\013\120\014\123\016\130\017\127\020" +
    "\126\021\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\041\uffc2\053\uffc2\055\uffc2\060" +
    "\uffc2\061\uffc2\001\002\000\050\013\120\014\123\016\130" +
    "\017\127\020\126\021\uffc3\022\uffc3\024\uffc3\025\122\026" +
    "\124\027\131\030\133\031\125\032\134\041\uffc3\053\uffc3" +
    "\055\uffc3\060\uffc3\061\uffc3\001\002\000\050\013\uffca\014" +
    "\uffca\016\130\017\127\020\126\021\uffca\022\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\041" +
    "\uffca\053\uffca\055\uffca\060\uffca\061\uffca\001\002\000\004" +
    "\005\105\001\002\000\004\053\160\001\002\000\004\056" +
    "\161\001\002\000\030\005\065\010\010\011\006\012\013" +
    "\042\072\044\100\045\063\046\061\047\057\050\064\051" +
    "\055\001\002\000\004\057\163\001\002\000\024\005\uffdf" +
    "\042\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\057\uffdf\001\002\000\040\013\120\014\123\016\130" +
    "\017\127\020\126\021\135\022\121\024\132\025\122\026" +
    "\124\027\131\030\133\031\125\032\134\053\165\001\002" +
    "\000\050\013\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\041\uffcb\053\uffcb\055\uffcb\060\uffcb\061" +
    "\uffcb\001\002\000\050\013\uffc5\014\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\041\uffc5\053\uffc5\055\uffc5" +
    "\060\uffc5\061\uffc5\001\002\000\020\004\037\005\065\006" +
    "\033\007\034\014\110\023\116\052\111\001\002\000\040" +
    "\013\120\014\123\016\130\017\127\020\126\021\135\022" +
    "\121\024\132\025\122\026\124\027\131\030\133\031\125" +
    "\032\134\055\171\001\002\000\064\013\uffd0\014\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\053\uffd0" +
    "\055\uffd0\060\uffd0\061\uffd0\001\002\000\024\005\uffe3\042" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\057\uffe3\001\002\000\024\005\uffde\042\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\057\uffde\001\002" +
    "\000\004\057\uffee\001\002\000\024\005\uffe4\042\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\057\uffe4" +
    "\001\002\000\024\005\uffb4\042\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\057\uffb4\001\002\000\022" +
    "\004\037\005\065\006\033\007\034\014\110\023\116\052" +
    "\111\053\202\001\002\000\004\053\205\001\002\000\044" +
    "\013\120\014\123\016\130\017\127\020\126\021\135\022" +
    "\121\024\132\025\122\026\124\027\131\030\133\031\125" +
    "\032\134\053\uffab\060\203\061\uffab\001\002\000\050\013" +
    "\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\041\uffd8\053\uffd8\055\uffd8\060\uffd8\061\uffd8\001\002" +
    "\000\020\004\037\005\065\006\033\007\034\014\110\023" +
    "\116\052\111\001\002\000\006\053\uffac\061\uffac\001\002" +
    "\000\050\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\041\uffd9\053\uffd9\055\uffd9\060\uffd9\061" +
    "\uffd9\001\002\000\004\061\207\001\002\000\024\005\uffdc" +
    "\042\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\057\uffdc\001\002\000\020\004\037\005\065\006\033" +
    "\007\034\014\110\023\116\052\111\001\002\000\040\013" +
    "\120\014\123\016\130\017\127\020\126\021\135\022\121" +
    "\024\132\025\122\026\124\027\131\030\133\031\125\032" +
    "\134\053\212\001\002\000\004\056\213\001\002\000\030" +
    "\005\065\010\010\011\006\012\013\042\072\044\100\045" +
    "\063\046\061\047\057\050\064\051\055\001\002\000\004" +
    "\057\215\001\002\000\026\005\uffe2\042\uffe2\043\216\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\057\uffe2" +
    "\001\002\000\004\056\217\001\002\000\030\005\065\010" +
    "\010\011\006\012\013\042\072\044\100\045\063\046\061" +
    "\047\057\050\064\051\055\001\002\000\004\057\221\001" +
    "\002\000\024\005\uffe1\042\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\057\uffe1\001\002\000\014\002" +
    "\ufffc\005\ufffc\010\ufffc\011\ufffc\012\ufffc\001\002\000\040" +
    "\013\120\014\123\016\130\017\127\020\126\021\135\022" +
    "\121\024\132\025\122\026\124\027\131\030\133\031\125" +
    "\032\134\061\225\001\002\000\024\005\uffdb\042\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\057\uffdb" +
    "\001\002\000\024\005\uffda\042\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\057\uffda\001\002\000\020" +
    "\004\037\005\065\006\033\007\034\014\110\023\116\052" +
    "\111\001\002\000\020\004\037\005\065\006\033\007\034" +
    "\014\110\023\116\052\111\001\002\000\020\004\037\005" +
    "\065\006\033\007\034\014\110\023\116\052\111\001\002" +
    "\000\020\004\037\005\065\006\033\007\034\014\110\023" +
    "\116\052\111\001\002\000\020\004\037\005\065\006\033" +
    "\007\034\014\110\023\116\052\111\001\002\000\020\004" +
    "\037\005\065\006\033\007\034\014\110\023\116\052\111" +
    "\001\002\000\042\013\120\014\123\016\130\017\127\020" +
    "\126\021\135\022\121\024\132\025\122\026\124\027\131" +
    "\030\133\031\125\032\134\053\uffd2\061\uffd2\001\002\000" +
    "\042\013\120\014\123\016\130\017\127\020\126\021\135" +
    "\022\121\024\132\025\122\026\124\027\131\030\133\031" +
    "\125\032\134\053\uffd4\061\uffd4\001\002\000\042\013\120" +
    "\014\123\016\130\017\127\020\126\021\135\022\121\024" +
    "\132\025\122\026\124\027\131\030\133\031\125\032\134" +
    "\053\uffd7\061\uffd7\001\002\000\042\013\120\014\123\016" +
    "\130\017\127\020\126\021\135\022\121\024\132\025\122" +
    "\026\124\027\131\030\133\031\125\032\134\053\uffd6\061" +
    "\uffd6\001\002\000\042\013\120\014\123\016\130\017\127" +
    "\020\126\021\135\022\121\024\132\025\122\026\124\027" +
    "\131\030\133\031\125\032\134\053\uffd5\061\uffd5\001\002" +
    "\000\042\013\120\014\123\016\130\017\127\020\126\021" +
    "\135\022\121\024\132\025\122\026\124\027\131\030\133" +
    "\031\125\032\134\053\uffd3\061\uffd3\001\002\000\020\004" +
    "\037\005\065\006\033\007\034\014\110\023\116\052\111" +
    "\001\002\000\040\013\120\014\123\016\130\017\127\020" +
    "\126\021\135\022\121\024\132\025\122\026\124\027\131" +
    "\030\133\031\125\032\134\053\244\001\002\000\004\056" +
    "\245\001\002\000\030\005\065\010\010\011\006\012\013" +
    "\042\072\044\100\045\063\046\061\047\057\050\064\051" +
    "\055\001\002\000\004\057\247\001\002\000\024\005\uffe0" +
    "\042\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\057\uffe0\001\002\000\004\061\251\001\002\000\024" +
    "\005\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\057\uffdd\001\002\000\010\010\010\011\006" +
    "\012\013\001\002\000\004\053\uffb8\001\002\000\010\053" +
    "\ufff0\054\255\060\ufff0\001\002\000\004\055\256\001\002" +
    "\000\006\053\uffef\060\uffef\001\002\000\030\005\065\010" +
    "\010\011\006\012\013\042\072\044\100\045\063\046\061" +
    "\047\057\050\064\051\055\001\002\000\004\057\261\001" +
    "\002\000\014\002\ufffb\005\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\001\002\000\012\010\010\011\006\012\013\053\263\001" +
    "\002\000\004\056\271\001\002\000\004\053\265\001\002" +
    "\000\004\056\266\001\002\000\030\005\065\010\010\011" +
    "\006\012\013\042\072\044\100\045\063\046\061\047\057" +
    "\050\064\051\055\001\002\000\004\057\270\001\002\000" +
    "\014\002\ufffa\005\ufffa\010\ufffa\011\ufffa\012\ufffa\001\002" +
    "\000\030\005\065\010\010\011\006\012\013\042\072\044" +
    "\100\045\063\046\061\047\057\050\064\051\055\001\002" +
    "\000\004\057\273\001\002\000\014\002\ufff9\005\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\001\002\000\004\002\uffb2\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\020\002\003\003\010\004\004\005\014\006" +
    "\006\010\015\033\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\010\004\004\005\014\006\006\010\015" +
    "\033\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\020\031\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\020\031\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\034\035\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\034\035\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\045" +
    "\011\046\030\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\065\010\055\012\061\013\100\014\072\015" +
    "\053\016\076\017\101\020\073\021\075\022\067\023\066" +
    "\024\074\025\057\032\070\034\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\247\001\001\000\006" +
    "\007\020\031\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\114\025\112\026\222\027\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\114\025" +
    "\112\026\200\027\113\036\205\001\001\000\002\001\001" +
    "\000\010\006\065\010\055\032\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\013\100\014\072\015\053" +
    "\016\076\017\101\020\073\021\075\022\067\023\066\024" +
    "\074\025\057\034\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\013\100" +
    "\014\072\015\053\016\076\017\101\020\073\021\075\022" +
    "\067\023\066\024\074\025\057\034\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\105\025\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\114" +
    "\025\112\026\111\027\113\001\001\000\012\023\114\025" +
    "\112\026\165\027\113\001\001\000\012\023\114\025\112" +
    "\026\163\027\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\114" +
    "\025\112\026\116\027\113\001\001\000\002\001\001\000" +
    "\012\023\114\025\112\026\154\027\113\001\001\000\012" +
    "\023\114\025\112\026\153\027\113\001\001\000\012\023" +
    "\114\025\112\026\152\027\113\001\001\000\012\023\114" +
    "\025\112\026\151\027\113\001\001\000\012\023\114\025" +
    "\112\026\150\027\113\001\001\000\012\023\114\025\112" +
    "\026\147\027\113\001\001\000\012\023\114\025\112\026" +
    "\146\027\113\001\001\000\012\023\114\025\112\026\145" +
    "\027\113\001\001\000\012\023\114\025\112\026\144\027" +
    "\113\001\001\000\012\023\114\025\112\026\143\027\113" +
    "\001\001\000\012\023\114\025\112\026\140\027\113\001" +
    "\001\000\012\023\114\025\112\026\137\027\113\001\001" +
    "\000\012\023\114\025\112\026\136\027\113\001\001\000" +
    "\012\023\114\025\112\026\135\027\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\114\025\112\026\142\027\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\156\025\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\006\065\010" +
    "\055\012\161\013\100\014\072\015\053\016\076\017\101" +
    "\020\073\021\075\022\067\023\066\024\074\025\057\032" +
    "\070\034\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\114\025\112\026\167\027\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\114\025\112\026\200\027\113\036\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\114\025\112\026\200\027\113\036\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\114\025\112\026\210\027" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\006\065\010\055\012\213\013\100\014\072\015\053\016" +
    "\076\017\101\020\073\021\075\022\067\023\066\024\074" +
    "\025\057\032\070\034\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\065\010\055" +
    "\012\217\013\100\014\072\015\053\016\076\017\101\020" +
    "\073\021\075\022\067\023\066\024\074\025\057\032\070" +
    "\034\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\114\025\112\026\240\027\113\001" +
    "\001\000\012\023\114\025\112\026\237\027\113\001\001" +
    "\000\012\023\114\025\112\026\236\027\113\001\001\000" +
    "\012\023\114\025\112\026\235\027\113\001\001\000\012" +
    "\023\114\025\112\026\234\027\113\001\001\000\012\023" +
    "\114\025\112\026\233\027\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\114\025\112" +
    "\026\242\027\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\006\065\010\055\012\245\013\100\014\072" +
    "\015\053\016\076\017\101\020\073\021\075\022\067\023" +
    "\066\024\074\025\057\032\070\034\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\045\011\046\030\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\006\065\010\055\012\257\013\100\014\072" +
    "\015\053\016\076\017\101\020\073\021\075\022\067\023" +
    "\066\024\074\025\057\032\070\034\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\045\011\046\030" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\006\065\010\055\012\266\013\100\014" +
    "\072\015\053\016\076\017\101\020\073\021\075\022\067" +
    "\023\066\024\074\025\057\032\070\034\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\065\010\055" +
    "\012\271\013\100\014\072\015\053\016\076\017\101\020" +
    "\073\021\075\022\067\023\066\024\074\025\057\032\070" +
    "\034\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String error = "";

    public void syntax_error(Symbol cur_token) {
        done_parsing();
        error = "Erro de sintaxe na linha " + cur_token.left + ", coluna " + cur_token.right + ". \n";
        error += "Token (" + (String) cur_token.value + ") inesperado. \n";
        System.out.printf("Erro de sintaxe na linha %d, coluna %d. \n", cur_token.left + 1, cur_token.right);
        System.out.printf("Token (%s) inesperado. \n", (String) cur_token.value);

    }

    //public void report_error(String message, Object info)  {
    //    System.out.println("Warning - " + message);
    //}

    //public void report_fatal_error(String message, Object info)  {
    //    System.out.println("Error - " + message);
    //    System.exit(-1);
    //}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaracoes 
            {
              Programa RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Declaracao> decList = (List<Declaracao>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Programa(decList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracao ::= decVar 
            {
              Declaracao RESULT =null;
		int decVleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decVright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecVar decV = (DecVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DecVar.InicDecVar(decV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracao ::= declaracaoFuncao 
            {
              Declaracao RESULT =null;
		int decFleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decFright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaracao decF = (Declaracao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Declaracao.InicDec(decF); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracao ::= declaracaoProcedimento 
            {
              Declaracao RESULT =null;
		int decPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaracao decP = (Declaracao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Declaracao.InicDec(decP); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracaoFuncao ::= tipo ID ABREPARENTESES listaParametro FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Declaracao RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Parametro> list = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Declaracao.declaracaoFuncaoComParametro(t,id,list,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoFuncao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracaoFuncao ::= tipo ID ABREPARENTESES FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Declaracao RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Declaracao.declaracaoFuncaoSemParametro(t,id,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoFuncao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracaoProcedimento ::= ID ABREPARENTESES listaParametro FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Declaracao RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Parametro> list = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Declaracao.declaracaoProcedimentoComParametro(id,list,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoProcedimento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracaoProcedimento ::= ID ABREPARENTESES FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Declaracao RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Declaracao.declaracaoProcedimentoSemParametro(id,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoProcedimento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decVar ::= tipo specVarSeq PONTOEVIRGULA 
            {
              DecVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int svsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int svsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SpecVar> svs = (List<SpecVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = DecVar._decVar(t,svs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVar",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // specVar ::= ID 
            {
              SpecVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = SpecVar.id(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specVar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // specVar ::= ID OPERADOR_ATRIBUICAO_RECEBE literal 
            {
              SpecVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = SpecVar.idAtribuicao(id,lit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specVar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // specVar ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES 
            {
              SpecVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = SpecVar.idArray(id,num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specVar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // specVar ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES OPERADOR_ATRIBUICAO_RECEBE ABRECHAVES seqLiteral FECHACHAVES 
            {
              SpecVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Literal> list = (List<Literal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = SpecVar.idArrayAtribuicao(id,num,list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specVar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= TIPO_STRING 
            {
              Tipo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Tipo.tipoString(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int TIPO_INTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int TIPO_INTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String TIPO_INT = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Tipo.tipoInt(TIPO_INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= BOOL 
            {
              Tipo RESULT =null;
		int TIPO_BOOLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int TIPO_BOOLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String TIPO_BOOL = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Tipo.tipoBoolean(TIPO_BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= tipo ID 
            {
              Parametro RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Parametro.parametro(t,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro ::= tipo ID ABRECOLCHETES FECHACOLCHETES 
            {
              Parametro RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Parametro.parametroArray(t,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloco ::= decVarList comandos 
            {
              Bloco RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DecVar> dec = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Comando> com = (List<Comando>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Bloco.decVarListComandos(dec,com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloco ::= decVarList 
            {
              Bloco RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DecVar> dec = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Bloco.decVarList(dec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloco ::= comandos 
            {
              Bloco RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Comando> com = (List<Comando>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Bloco.comandos(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando ::= comandoIf 
            {
              Comando RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.InicCom(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando ::= comandoFor 
            {
              Comando RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.InicCom(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando ::= comandoWhile 
            {
              Comando RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.InicCom(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= retornoSubprograma 
            {
              Comando RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.InicCom(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= interrupcaoDeLaco 
            {
              Comando RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.InicCom(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= read 
            {
              Comando RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.InicCom(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= write 
            {
              Comando RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.InicCom(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= chamada PONTOEVIRGULA 
            {
              Comando RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Chamada com = (Chamada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Comando.InicCom(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando ::= comandoAtribuicao PONTOEVIRGULA 
            {
              Comando RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Comando.InicCom(com); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comandoIf ::= IF ABREPARENTESES expressao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Comando RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloco1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloco1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Bloco bloco1 = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Comando._if(exp, bloco1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoIf",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comandoIf ::= IF ABREPARENTESES expressao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES ELSE ABRECHAVES bloco FECHACHAVES 
            {
              Comando RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bloco1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bloco1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Bloco bloco1 = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bloco2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloco2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Bloco bloco2 = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Comando._ifElse(exp, bloco1, bloco2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoIf",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comandoWhile ::= WHILE ABREPARENTESES expressao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Comando RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int blocoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blocoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Bloco bloco = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Comando._while(exp, bloco); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoWhile",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comandoFor ::= FOR ABREPARENTESES comandoAtribuicao PONTOEVIRGULA expressao PONTOEVIRGULA comandoAtribuicao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Comando RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Comando c1 = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Comando c2 = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Comando._for(c1, exp, c2, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoFor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // interrupcaoDeLaco ::= BREAK PONTOEVIRGULA 
            {
              Comando RESULT =null;
		 RESULT = Comando.interrupcao(Sym.BREAK); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interrupcaoDeLaco",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // read ::= READ variavel PONTOEVIRGULA 
            {
              Comando RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variavel var = (Variavel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Comando.read(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // write ::= WRITE listaExpressoes PONTOEVIRGULA 
            {
              Comando RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expressao> list = (List<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Comando.write(list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // retornoSubprograma ::= RETURN PONTOEVIRGULA 
            {
              Comando RESULT =null;
		 RESULT = Comando._retorno(Sym.RETURN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoSubprograma",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // retornoSubprograma ::= RETURN expressao PONTOEVIRGULA 
            {
              Comando RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Comando._retornoExp(Sym.RETURN, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoSubprograma",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // chamada ::= ID ABREPARENTESES listaExpressoes FECHAPARENTESES 
            {
              Chamada RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expressao> expList = (List<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Chamada.chamadaParametro(ident, expList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // chamada ::= ID ABREPARENTESES FECHAPARENTESES 
            {
              Chamada RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Chamada.chamadaSemParametro(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comandoAtribuicao ::= variavel OPERADOR_ATRIBUICAO_MAIS_RECEBE expressao 
            {
              Comando RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variavel var = (Variavel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_MAIS_RECEBE ,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comandoAtribuicao ::= variavel OPERADOR_ATRIBUICAO_MENOS_RECEBE expressao 
            {
              Comando RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variavel var = (Variavel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_MENOS_RECEBE ,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comandoAtribuicao ::= variavel OPERADOR_ATRIBUICAO_VEZES_RECEBE expressao 
            {
              Comando RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variavel var = (Variavel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_VEZES_RECEBE ,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comandoAtribuicao ::= variavel OPERADOR_ATRIBUICAO_DIVIDIR_RECEBE expressao 
            {
              Comando RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variavel var = (Variavel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_DIVIDIR_RECEBE ,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comandoAtribuicao ::= variavel OPERADOR_ATRIBUICAO_MOD_RECEBE expressao 
            {
              Comando RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variavel var = (Variavel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_MOD_RECEBE ,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comandoAtribuicao ::= variavel OPERADOR_ATRIBUICAO_RECEBE expressao 
            {
              Comando RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variavel var = (Variavel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_RECEBE ,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variavel ::= ID 
            {
              Variavel RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Variavel.id(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variavel ::= ID ABRECOLCHETES expressao FECHACOLCHETES 
            {
              Variavel RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Variavel.idArray(ident, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= literal 
            {
              Expressao RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.literal(lit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= variavel 
            {
              Expressao RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variavel var = (Variavel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.variavel(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= chamada 
            {
              Expressao RESULT =null;
		int chaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Chamada cha = (Chamada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.chamada(cha); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao ::= NEGACAO expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.unop(Sym.NEGACAO, exp1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao ::= ABREPARENTESES expressao FECHAPARENTESES 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressao ::= expressao MAIS expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.MAIS,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressao ::= expressao MENOS expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.MENOS,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressao ::= expressao DIVIDIR expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.DIVIDIR,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expressao ::= expressao MULTIPLICAR expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.MULTIPLICAR,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expressao ::= expressao MOD expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.MOD,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expressao ::= MENOS expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.unop(Sym.MENOS, exp1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expressao ::= expressao OR expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.OR,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressao ::= expressao AND expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.AND,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expressao ::= expressao MAIOR expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.MAIOR,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expressao ::= expressao MENOR expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.MENOR,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expressao ::= expressao MAIOR_IGUAL expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.MAIOR_IGUAL,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expressao ::= expressao MENOR_IGUAL expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.MENOR_IGUAL,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expressao ::= expressao IGUAL expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.IGUAL,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expressao ::= expressao DIFERENTE expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.binop(exp1,Sym.DIFERENTE,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expressao ::= expressao INTERROGACAO expressao DOIS_PONTOS expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp3 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Expressao.ternop(exp1,exp2, exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= NUMERO 
            {
              Literal RESULT =null;
		int numStrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numStrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String numStr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Literal.numero(numStr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= STRING 
            {
              Literal RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Literal.string(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= OPERADOR_BOOLEANO 
            {
              Literal RESULT =null;
		int boolStrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolStrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String boolStr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Literal.bool(boolStr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaParametro ::= parametro VIRGULA listaParametro 
            {
              List<Parametro> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro par = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Parametro> parList = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parList.add(par); RESULT = parList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaParametro",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listaParametro ::= parametro 
            {
              List<Parametro> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro par = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  List<Parametro> lista = new ArrayList<Parametro>();
                                                                            lista.add(par); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaParametro",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // specVarSeq ::= specVar VIRGULA specVarSeq 
            {
              List<SpecVar> RESULT =null;
		int sVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SpecVar sVar = (SpecVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sVarListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sVarListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SpecVar> sVarList = (List<SpecVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sVarList.add(sVar); RESULT = sVarList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specVarSeq",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // specVarSeq ::= specVar 
            {
              List<SpecVar> RESULT =null;
		int sVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SpecVar sVar = (SpecVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  List<SpecVar> lista = new ArrayList<SpecVar>();
                                                                            lista.add(sVar); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specVarSeq",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // decVarList ::= decVar decVarList 
            {
              List<DecVar> RESULT =null;
		int dVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecVar dVar = (DecVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dVarListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dVarListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DecVar> dVarList = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 dVarList.add(dVar); RESULT = dVarList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVarList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // decVarList ::= decVar 
            {
              List<DecVar> RESULT =null;
		int dVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecVar dVar = (DecVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  List<DecVar> lista = new ArrayList<DecVar>();
                                                                            lista.add(dVar); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVarList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracoes ::= declaracao declaracoes 
            {
              List<Declaracao> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declaracao dec = (Declaracao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Declaracao> decList = (List<Declaracao>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 decList.add(dec); RESULT = decList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracoes",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracoes ::= declaracao 
            {
              List<Declaracao> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaracao dec = (Declaracao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  List<Declaracao> lista = new ArrayList<Declaracao>();
                                                                            lista.add(dec); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracoes",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comandos ::= comando comandos 
            {
              List<Comando> RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int comListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Comando> comList = (List<Comando>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 comList.add(com); RESULT = comList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comandos ::= comando 
            {
              List<Comando> RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  List<Comando> lista = new ArrayList<Comando>();
                                                                            lista.add(com); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // seqLiteral ::= literal seqLiteral 
            {
              List<Literal> RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int litListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Literal> litList = (List<Literal>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 litList.add(lit); RESULT = litList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // seqLiteral ::= literal 
            {
              List<Literal> RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  List<Literal> lista = new ArrayList<Literal>();
                                                                            lista.add(lit); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // listaExpressoes ::= expressao VIRGULA listaExpressoes 
            {
              List<Expressao> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expressao> expList = (List<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 expList.add(exp); RESULT = expList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpressoes",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listaExpressoes ::= expressao 
            {
              List<Expressao> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  List<Expressao> lista = new ArrayList<Expressao>();
                                                                            lista.add(exp); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpressoes",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
