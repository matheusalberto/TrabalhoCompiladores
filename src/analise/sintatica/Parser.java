
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analise.sintatica;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\004\000\002\005\004\000" +
    "\002\037\004\000\002\037\003\000\002\006\004\000\002" +
    "\006\005\000\002\006\007\000\002\006\006\000\002\007" +
    "\007\000\002\007\010\000\002\007\014\000\002\007\013" +
    "\000\002\010\004\000\002\010\003\000\002\010\004\000" +
    "\002\010\003\000\002\010\004\000\002\010\003\000\002" +
    "\011\004\000\002\012\003\000\002\012\006\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\040\012" +
    "\000\002\040\011\000\002\041\011\000\002\041\010\000" +
    "\002\014\004\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\006\000\002\017\005\000" +
    "\002\020\011\000\002\020\012\000\002\021\006\000\002" +
    "\022\015\000\002\023\011\000\002\024\004\000\002\025" +
    "\007\000\002\026\007\000\002\026\006\000\002\027\005" +
    "\000\002\030\005\000\002\031\004\000\002\031\003\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\004\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\004\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\007" +
    "\000\002\033\003\000\002\033\004\000\002\034\004\000" +
    "\002\035\004\000\002\035\006\000\002\036\005\000\002" +
    "\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\012\035\010\036\006\037\013\042\014\001" +
    "\002\000\004\002\312\001\002\000\014\002\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\042\ufffc\001\002\000\004\042\uffe4\001" +
    "\002\000\014\002\ufffd\035\ufffd\036\ufffd\037\ufffd\042\ufffd" +
    "\001\002\000\004\042\uffe3\001\002\000\014\002\ufffe\035" +
    "\010\036\006\037\013\042\014\001\002\000\004\002\000" +
    "\001\002\000\004\042\uffe5\001\002\000\004\045\277\001" +
    "\002\000\014\002\ufffb\035\ufffb\036\ufffb\037\ufffb\042\ufffb" +
    "\001\002\000\004\042\017\001\002\000\014\024\022\045" +
    "\023\047\026\053\024\054\025\001\002\000\034\002\ufffa" +
    "\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\052\ufffa\001\002" +
    "\000\034\002\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\052\ufff9\001\002\000\020\005\124\014\133\025\134\042" +
    "\100\043\127\044\126\045\125\001\002\000\012\035\010" +
    "\036\006\037\013\046\056\001\002\000\004\042\054\001" +
    "\002\000\034\002\ufff6\027\ufff6\031\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\052\ufff6\001\002\000\004\043\027\001\002\000\004" +
    "\050\030\001\002\000\010\024\031\053\032\054\033\001" +
    "\002\000\004\051\036\001\002\000\004\042\034\001\002" +
    "\000\034\002\ufff2\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\052\ufff2\001\002\000\004\047\026\001\002\000\034\002" +
    "\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\052\ufff1\001" +
    "\002\000\010\025\042\043\037\044\040\001\002\000\006" +
    "\052\uffed\053\044\001\002\000\006\052\uffe9\053\044\001" +
    "\002\000\004\052\046\001\002\000\006\052\uffeb\053\044" +
    "\001\002\000\004\052\uffec\001\002\000\010\025\042\043" +
    "\037\044\040\001\002\000\004\052\uffe8\001\002\000\006" +
    "\053\050\054\047\001\002\000\034\002\uffef\027\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\052\uffef\001\002\000\004\042" +
    "\034\001\002\000\034\002\ufff0\027\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\052\ufff0\001\002\000\004\052\uffea\001\002" +
    "\000\004\052\uffee\001\002\000\010\024\022\053\024\054" +
    "\025\001\002\000\034\002\ufff5\027\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\052\ufff5\001\002\000\004\051\270\001\002" +
    "\000\004\042\265\001\002\000\004\046\064\001\002\000" +
    "\006\046\uffa7\053\062\001\002\000\010\035\010\036\006" +
    "\037\013\001\002\000\004\046\uffa8\001\002\000\004\051" +
    "\065\001\002\000\030\027\105\031\112\032\076\033\074" +
    "\034\072\035\010\036\006\037\013\040\077\041\070\042" +
    "\100\001\002\000\024\027\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\040\uffda\041\uffda\042\uffda\052\uffda\001\002\000" +
    "\004\052\uffc4\001\002\000\004\042\120\001\002\000\004" +
    "\042\262\001\002\000\004\045\254\001\002\000\004\024" +
    "\251\001\002\000\004\047\245\001\002\000\004\052\244" +
    "\001\002\000\004\045\231\001\002\000\020\005\124\014" +
    "\133\025\134\042\100\043\127\044\126\045\125\001\002" +
    "\000\056\004\uffe7\005\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\026\uffe7\045\215\046\uffe7\047" +
    "\207\050\uffe7\053\uffe7\054\uffe7\001\002\000\032\027\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\010\036\006\037" +
    "\013\040\ufff7\041\ufff7\042\ufff7\052\ufff7\001\002\000\024" +
    "\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\052\uffd6\001\002\000\024\027\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\040\uffd8\041\uffd8\042\uffd8\052" +
    "\uffd8\001\002\000\024\027\105\031\112\032\076\033\074" +
    "\034\072\040\077\041\070\042\100\052\uffc5\001\002\000" +
    "\004\054\212\001\002\000\024\027\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\040\uffdc\041\uffdc\042\uffdc\052\uffdc\001" +
    "\002\000\024\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\052\uffd5\001\002\000\024\027" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\052\uffd9\001\002\000\024\027\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\040\uffd4\041\uffd4\042\uffd4\052\uffd4" +
    "\001\002\000\004\045\117\001\002\000\024\027\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\052\uffdb\001\002\000\024\027\105\031\112\032\076\033" +
    "\074\034\072\040\077\041\070\042\100\052\uffdd\001\002" +
    "\000\024\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\052\uffd7\001\002\000\004\052\uffde" +
    "\001\002\000\004\042\120\001\002\000\010\024\uffe7\047" +
    "\207\054\uffe7\001\002\000\004\024\205\001\002\000\004" +
    "\054\123\001\002\000\020\005\124\014\133\025\134\042" +
    "\100\043\127\044\126\045\125\001\002\000\020\005\124" +
    "\014\133\025\134\042\100\043\127\044\126\045\125\001" +
    "\002\000\020\005\124\014\133\025\134\042\100\043\127" +
    "\044\126\045\125\001\002\000\050\004\uffc2\005\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2\046" +
    "\uffc2\050\uffc2\053\uffc2\054\uffc2\001\002\000\050\004\uffc3" +
    "\005\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\026\uffc3\046\uffc3\050\uffc3\053\uffc3\054\uffc3\001\002\000" +
    "\040\004\136\005\140\007\146\010\145\011\144\012\152" +
    "\013\137\015\150\016\141\017\142\020\147\021\151\022" +
    "\143\023\153\054\174\001\002\000\050\004\uffc0\005\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\026\uffc0" +
    "\046\uffc0\050\uffc0\053\uffc0\054\uffc0\001\002\000\050\004" +
    "\uffbf\005\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\026\uffbf\046\uffbf\050\uffbf\053\uffbf\054\uffbf\001\002" +
    "\000\020\005\124\014\133\025\134\042\100\043\127\044" +
    "\126\045\125\001\002\000\050\004\uffc1\005\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\026\uffc1\046\uffc1" +
    "\050\uffc1\053\uffc1\054\uffc1\001\002\000\050\004\uffbe\005" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026" +
    "\uffbe\046\uffbe\050\uffbe\053\uffbe\054\uffbe\001\002\000\020" +
    "\005\124\014\133\025\134\042\100\043\127\044\126\045" +
    "\125\001\002\000\020\005\124\014\133\025\134\042\100" +
    "\043\127\044\126\045\125\001\002\000\020\005\124\014" +
    "\133\025\134\042\100\043\127\044\126\045\125\001\002" +
    "\000\020\005\124\014\133\025\134\042\100\043\127\044" +
    "\126\045\125\001\002\000\020\005\124\014\133\025\134" +
    "\042\100\043\127\044\126\045\125\001\002\000\020\005" +
    "\124\014\133\025\134\042\100\043\127\044\126\045\125" +
    "\001\002\000\020\005\124\014\133\025\134\042\100\043" +
    "\127\044\126\045\125\001\002\000\020\005\124\014\133" +
    "\025\134\042\100\043\127\044\126\045\125\001\002\000" +
    "\020\005\124\014\133\025\134\042\100\043\127\044\126" +
    "\045\125\001\002\000\020\005\124\014\133\025\134\042" +
    "\100\043\127\044\126\045\125\001\002\000\020\005\124" +
    "\014\133\025\134\042\100\043\127\044\126\045\125\001" +
    "\002\000\020\005\124\014\133\025\134\042\100\043\127" +
    "\044\126\045\125\001\002\000\020\005\124\014\133\025" +
    "\134\042\100\043\127\044\126\045\125\001\002\000\020" +
    "\005\124\014\133\025\134\042\100\043\127\044\126\045" +
    "\125\001\002\000\050\004\136\005\140\007\146\010\145" +
    "\011\144\012\uffb1\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\026\uffb1\046\uffb1\050\uffb1" +
    "\053\uffb1\054\uffb1\001\002\000\050\004\136\005\140\007" +
    "\146\010\145\011\144\012\uffb6\013\137\015\uffb6\016\141" +
    "\017\142\020\147\021\151\022\143\023\153\026\uffb6\046" +
    "\uffb6\050\uffb6\053\uffb6\054\uffb6\001\002\000\050\004\136" +
    "\005\140\007\146\010\145\011\144\012\uffaf\013\uffaf\015" +
    "\uffaf\016\141\017\142\020\uffaf\021\uffaf\022\143\023\153" +
    "\026\uffaf\046\uffaf\050\uffaf\053\uffaf\054\uffaf\001\002\000" +
    "\040\004\136\005\140\007\146\010\145\011\144\012\152" +
    "\013\137\015\150\016\141\017\142\020\147\021\151\022" +
    "\143\023\153\026\160\001\002\000\020\005\124\014\133" +
    "\025\134\042\100\043\127\044\126\045\125\001\002\000" +
    "\050\004\136\005\140\007\146\010\145\011\144\012\152" +
    "\013\137\015\150\016\141\017\142\020\147\021\151\022" +
    "\143\023\153\026\uffae\046\uffae\050\uffae\053\uffae\054\uffae" +
    "\001\002\000\050\004\136\005\140\007\146\010\145\011" +
    "\144\012\uffb0\013\uffb0\015\uffb0\016\141\017\142\020\uffb0" +
    "\021\uffb0\022\143\023\153\026\uffb0\046\uffb0\050\uffb0\053" +
    "\uffb0\054\uffb0\001\002\000\050\004\uffba\005\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\026\uffba\046\uffba" +
    "\050\uffba\053\uffba\054\uffba\001\002\000\050\004\uffb9\005" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\026" +
    "\uffb9\046\uffb9\050\uffb9\053\uffb9\054\uffb9\001\002\000\050" +
    "\004\uffb8\005\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\026\uffb8\046\uffb8\050\uffb8\053\uffb8\054\uffb8\001" +
    "\002\000\050\004\136\005\140\007\146\010\145\011\144" +
    "\012\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\026\uffb2\046\uffb2\050\uffb2\053\uffb2" +
    "\054\uffb2\001\002\000\050\004\136\005\140\007\146\010" +
    "\145\011\144\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\026\uffb3\046\uffb3\050" +
    "\uffb3\053\uffb3\054\uffb3\001\002\000\050\004\136\005\140" +
    "\007\146\010\145\011\144\012\uffb4\013\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\026\uffb4" +
    "\046\uffb4\050\uffb4\053\uffb4\054\uffb4\001\002\000\050\004" +
    "\uffbb\005\uffbb\007\146\010\145\011\144\012\uffbb\013\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\026\uffbb\046\uffbb\050\uffbb\053\uffbb\054\uffbb\001\002" +
    "\000\050\004\136\005\140\007\146\010\145\011\144\012" +
    "\uffb5\013\uffb5\015\uffb5\016\141\017\142\020\147\021\151" +
    "\022\143\023\153\026\uffb5\046\uffb5\050\uffb5\053\uffb5\054" +
    "\uffb5\001\002\000\050\004\uffbc\005\uffbc\007\146\010\145" +
    "\011\144\012\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\026\uffbc\046\uffbc\050\uffbc" +
    "\053\uffbc\054\uffbc\001\002\000\004\042\120\001\002\000" +
    "\004\046\176\001\002\000\004\051\177\001\002\000\030" +
    "\027\105\031\112\032\076\033\074\034\072\035\010\036" +
    "\006\037\013\040\077\041\070\042\100\001\002\000\004" +
    "\052\201\001\002\000\024\027\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\040\uffce\041\uffce\042\uffce\052\uffce\001\002" +
    "\000\040\004\136\005\140\007\146\010\145\011\144\012" +
    "\152\013\137\015\150\016\141\017\142\020\147\021\151" +
    "\022\143\023\153\046\203\001\002\000\050\004\uffbd\005" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\026" +
    "\uffbd\046\uffbd\050\uffbd\053\uffbd\054\uffbd\001\002\000\050" +
    "\004\uffb7\005\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\026\uffb7\046\uffb7\050\uffb7\053\uffb7\054\uffb7\001" +
    "\002\000\020\005\124\014\133\025\134\042\100\043\127" +
    "\044\126\045\125\001\002\000\042\004\136\005\140\007" +
    "\146\010\145\011\144\012\152\013\137\015\150\016\141" +
    "\017\142\020\147\021\151\022\143\023\153\046\uffd2\054" +
    "\uffd2\001\002\000\020\005\124\014\133\025\134\042\100" +
    "\043\127\044\126\045\125\001\002\000\040\004\136\005" +
    "\140\007\146\010\145\011\144\012\152\013\137\015\150" +
    "\016\141\017\142\020\147\021\151\022\143\023\153\050" +
    "\211\001\002\000\052\004\uffe6\005\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\026\uffe6\046\uffe6" +
    "\050\uffe6\053\uffe6\054\uffe6\001\002\000\024\027\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\052\uffcc\001\002\000\004\052\uffc6\001\002\000\024\027" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\052\ufff8\001\002\000\022\005\124\014\133\025" +
    "\134\042\100\043\127\044\126\045\125\046\220\001\002" +
    "\000\004\046\225\001\002\000\044\004\136\005\140\007" +
    "\146\010\145\011\144\012\152\013\137\015\150\016\141" +
    "\017\142\020\147\021\151\022\143\023\153\046\uffad\053" +
    "\222\054\uffad\001\002\000\004\054\221\001\002\000\072" +
    "\004\uffc9\005\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\046\uffc9\050\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\001\002\000\020\005\124\014\133\025" +
    "\134\042\100\043\127\044\126\045\125\001\002\000\006" +
    "\046\uffac\054\uffac\001\002\000\006\046\uffab\054\uffab\001" +
    "\002\000\004\054\226\001\002\000\072\004\uffca\005\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\026\uffca" +
    "\027\uffca\031\uffca\032\uffca\033\uffca\034\uffca\040\uffca\041" +
    "\uffca\042\uffca\046\uffca\050\uffca\052\uffca\053\uffca\054\uffca" +
    "\001\002\000\004\054\230\001\002\000\024\027\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\052\uffc7\001\002\000\020\005\124\014\133\025\134\042" +
    "\100\043\127\044\126\045\125\001\002\000\040\004\136" +
    "\005\140\007\146\010\145\011\144\012\152\013\137\015" +
    "\150\016\141\017\142\020\147\021\151\022\143\023\153" +
    "\046\233\001\002\000\004\051\234\001\002\000\030\027" +
    "\105\031\112\032\076\033\074\034\072\035\010\036\006" +
    "\037\013\040\077\041\070\042\100\001\002\000\004\052" +
    "\236\001\002\000\026\027\uffd1\030\237\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\040\uffd1\041\uffd1\042\uffd1\052\uffd1\001" +
    "\002\000\004\051\241\001\002\000\024\027\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\040\uffd0\041\uffd0\042\uffd0\052" +
    "\uffd0\001\002\000\030\027\105\031\112\032\076\033\074" +
    "\034\072\035\010\036\006\037\013\040\077\041\070\042" +
    "\100\001\002\000\004\052\243\001\002\000\024\027\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\052\uffcf\001\002\000\014\002\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\042\uffe2\001\002\000\020\005\124\014\133\025" +
    "\134\042\100\043\127\044\126\045\125\001\002\000\040" +
    "\004\136\005\140\007\146\010\145\011\144\012\152\013" +
    "\137\015\150\016\141\017\142\020\147\021\151\022\143" +
    "\023\153\050\247\001\002\000\004\054\250\001\002\000" +
    "\024\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\052\uffcb\001\002\000\020\005\124\014" +
    "\133\025\134\042\100\043\127\044\126\045\125\001\002" +
    "\000\040\004\136\005\140\007\146\010\145\011\144\012" +
    "\152\013\137\015\150\016\141\017\142\020\147\021\151" +
    "\022\143\023\153\054\253\001\002\000\024\027\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\052\uffd3\001\002\000\020\005\124\014\133\025\134\042" +
    "\100\043\127\044\126\045\125\001\002\000\040\004\136" +
    "\005\140\007\146\010\145\011\144\012\152\013\137\015" +
    "\150\016\141\017\142\020\147\021\151\022\143\023\153" +
    "\046\256\001\002\000\004\051\257\001\002\000\030\027" +
    "\105\031\112\032\076\033\074\034\072\035\010\036\006" +
    "\037\013\040\077\041\070\042\100\001\002\000\004\052" +
    "\261\001\002\000\024\027\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\040\uffcd\041\uffcd\042\uffcd\052\uffcd\001\002\000" +
    "\012\024\022\047\026\053\024\054\025\001\002\000\004" +
    "\054\264\001\002\000\024\027\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\040\uffc8\041\uffc8\042\uffc8\052\uffc8\001\002" +
    "\000\010\046\uffaa\047\266\053\uffaa\001\002\000\004\050" +
    "\267\001\002\000\006\046\uffa9\053\uffa9\001\002\000\030" +
    "\027\105\031\112\032\076\033\074\034\072\035\010\036" +
    "\006\037\013\040\077\041\070\042\100\001\002\000\004" +
    "\052\272\001\002\000\014\002\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\042\uffe1\001\002\000\042\004\136\005\140\007\146" +
    "\010\145\011\144\012\152\013\137\015\150\016\141\017" +
    "\142\020\147\021\151\022\143\023\153\053\274\054\275" +
    "\001\002\000\004\042\054\001\002\000\034\002\ufff3\027" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\042\ufff3\052\ufff3\001\002\000" +
    "\034\002\ufff4\027\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\052" +
    "\ufff4\001\002\000\012\035\010\036\006\037\013\046\300" +
    "\001\002\000\004\051\306\001\002\000\004\046\302\001" +
    "\002\000\004\051\303\001\002\000\030\027\105\031\112" +
    "\032\076\033\074\034\072\035\010\036\006\037\013\040" +
    "\077\041\070\042\100\001\002\000\004\052\305\001\002" +
    "\000\014\002\uffe0\035\uffe0\036\uffe0\037\uffe0\042\uffe0\001" +
    "\002\000\030\027\105\031\112\032\076\033\074\034\072" +
    "\035\010\036\006\037\013\040\077\041\070\042\100\001" +
    "\002\000\004\052\310\001\002\000\014\002\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\042\uffdf\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\020\002\003\003\011\004\010\005\006\013" +
    "\015\040\004\041\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\310\004\010\005\006\013\015\040\004" +
    "\041\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\017\007\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\130\026\131\032\272\001\001\000\010" +
    "\013\056\035\060\036\057\001\001\000\004\006\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\040\001\001\000\004\011\052\001\001\000" +
    "\004\011\051\001\001\000\002\001\001\000\004\011\042" +
    "\001\001\000\002\001\001\000\004\010\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\056\035\060\036\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\100\012\072\013" +
    "\070\014\066\015\113\016\107\020\105\022\112\023\065" +
    "\024\114\025\102\026\101\027\106\030\110\031\074\037" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\262\001\001\000\006\006\017\007\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\130\026\131\032" +
    "\216\033\226\001\001\000\002\001\001\000\010\005\100" +
    "\013\070\037\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\012\072\014\212\015\113\016\107\020\105" +
    "\022\112\023\065\024\114\025\102\026\101\027\106\030" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\012\072\014\115\015\113" +
    "\016\107\020\105\022\112\023\065\024\114\025\102\026" +
    "\101\027\106\030\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\120\017\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\130" +
    "\026\131\032\127\001\001\000\010\012\130\026\131\032" +
    "\203\001\001\000\010\012\130\026\131\032\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\130\026\131" +
    "\032\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\130\026\131\032\172\001\001\000\010\012\130" +
    "\026\131\032\171\001\001\000\010\012\130\026\131\032" +
    "\170\001\001\000\010\012\130\026\131\032\167\001\001" +
    "\000\010\012\130\026\131\032\166\001\001\000\010\012" +
    "\130\026\131\032\165\001\001\000\010\012\130\026\131" +
    "\032\164\001\001\000\010\012\130\026\131\032\163\001" +
    "\001\000\010\012\130\026\131\032\162\001\001\000\010" +
    "\012\130\026\131\032\161\001\001\000\010\012\130\026" +
    "\131\032\156\001\001\000\010\012\130\026\131\032\155" +
    "\001\001\000\010\012\130\026\131\032\154\001\001\000" +
    "\010\012\130\026\131\032\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\130\026\131\032\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\120\017\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\100\012\072\013\070\014" +
    "\066\015\113\016\107\020\105\022\112\023\065\024\114" +
    "\025\102\026\101\027\106\030\110\031\177\037\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\130\026" +
    "\131\032\205\001\001\000\002\001\001\000\010\012\130" +
    "\026\131\032\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\130\026\131\032\216\033\215\001\001\000" +
    "\002\001\001\000\004\034\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\130\026\131\032\216\033" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\130\026\131\032\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\100\012\072\013" +
    "\070\014\066\015\113\016\107\020\105\022\112\023\065" +
    "\024\114\025\102\026\101\027\106\030\110\031\234\037" +
    "\103\001\001\000\002\001\001\000\004\021\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\100\012" +
    "\072\013\070\014\066\015\113\016\107\020\105\022\112" +
    "\023\065\024\114\025\102\026\101\027\106\030\110\031" +
    "\241\037\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\130\026\131\032\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\130\026\131\032\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\130\026\131\032\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\100\012\072\013\070\014\066\015\113\016\107\020\105" +
    "\022\112\023\065\024\114\025\102\026\101\027\106\030" +
    "\110\031\257\037\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\100\012\072\013\070\014\066\015\113\016" +
    "\107\020\105\022\112\023\065\024\114\025\102\026\101" +
    "\027\106\030\110\031\270\037\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\056\035\060\036\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\100\012\072\013" +
    "\070\014\066\015\113\016\107\020\105\022\112\023\065" +
    "\024\114\025\102\026\101\027\106\030\110\031\303\037" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\100\012\072\013\070\014\066\015\113\016\107\020" +
    "\105\022\112\023\065\024\114\025\102\026\101\027\106" +
    "\030\110\031\306\037\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol cur_token) {
	  done_parsing();
	  System.out.printf("Erro de sintaxe na linha %d, coluna %d. \n", cur_token.left + 1, cur_token.right);
	  System.out.printf("Token (%s) inesperado. \n", (String)cur_token.value);

    }

    //public void report_error(String message, Object info)  {
    //    System.out.println("Warning - " + message);
    //}

    //public void report_fatal_error(String message, Object info)  {
    //    System.out.println("Error - " + message);
    //    System.exit(-1);
    //}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaracoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracoes ::= declaracao declaracoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracoes ::= declaracao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracao ::= decVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracao ::= declaracaoFuncao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracao ::= declaracaoProcedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decVar ::= tipo sequenciaID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decVar ::= tipo sequenciaVETOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decVarList ::= decVar decVarList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVarList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decVarList ::= decVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decVarList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sequenciaID ::= ID PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sequenciaID ::= ID VIRGULA sequenciaID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sequenciaID ::= ID OPERADOR_ATRIBUICAO expressao VIRGULA sequenciaID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sequenciaID ::= ID OPERADOR_ATRIBUICAO expressao PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sequenciaVETOR ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaVETOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sequenciaVETOR ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES VIRGULA sequenciaVETOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaVETOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sequenciaVETOR ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES OPERADOR_ATRIBUICAO ABRECHAVES expressaoVETOR FECHACHAVES VIRGULA sequenciaVETOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaVETOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sequenciaVETOR ::= ID ABRECOLCHETES NUMERO FECHACOLCHETES OPERADOR_ATRIBUICAO ABRECHAVES expressaoVETOR FECHACHAVES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenciaVETOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressaoVETOR ::= NUMERO virgulaOuVazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressaoVETOR ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressaoVETOR ::= OPERADOR_BOOLEANO virgulaOuVazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressaoVETOR ::= OPERADOR_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressaoVETOR ::= STRING virgulaOuVazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressaoVETOR ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressaoVETOR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // virgulaOuVazio ::= VIRGULA expressaoVETOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virgulaOuVazio",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variavel ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variavel ::= ID ABRECOLCHETES expressao FECHACOLCHETES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= TIPO_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracaoFuncao ::= tipo ID ABREPARENTESES seqParametro FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoFuncao",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracaoFuncao ::= tipo ID ABREPARENTESES FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoFuncao",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracaoProcedimento ::= ID ABREPARENTESES seqParametro FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoProcedimento",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracaoProcedimento ::= ID ABREPARENTESES FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoProcedimento",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comandos ::= comando comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comandos ::= comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comando ::= comandoIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando ::= comandoFor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comando ::= comandoWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comando ::= comandoAtribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comando ::= retornoSubprograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comando ::= interrupcaoDeLaco 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comando ::= chamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comando ::= read 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comando ::= write 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comandoAtribuicao ::= variavel OPERADOR_ATRIBUICAO expressao PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicao",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comandoAtribuicaoFor ::= variavel OPERADOR_ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoAtribuicaoFor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comandoIf ::= IF ABREPARENTESES expressao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoIf",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comandoIf ::= IF ABREPARENTESES expressao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoIf",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // else ::= ELSE ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comandoFor ::= FOR ABREPARENTESES comandoAtribuicaoFor PONTOEVIRGULA expressao PONTOEVIRGULA comandoAtribuicaoFor FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoFor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comandoWhile ::= WHILE ABREPARENTESES expressao FECHAPARENTESES ABRECHAVES bloco FECHACHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandoWhile",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // interrupcaoDeLaco ::= BREAK PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interrupcaoDeLaco",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // retornoSubprograma ::= RETURN ABRECOLCHETES expressao FECHACOLCHETES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoSubprograma",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // chamada ::= ID ABREPARENTESES parametroChamada FECHAPARENTESES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // chamada ::= ID ABREPARENTESES FECHAPARENTESES PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // read ::= READ variavel PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // write ::= WRITE parametroChamada PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloco ::= decVarList comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloco ::= decVarList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloco ::= comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressao ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expressao ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expressao ::= OPERADOR_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expressao ::= variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expressao ::= chamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expressao ::= NEGACAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expressao ::= ABREPARENTESES expressao FECHAPARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expressao ::= expressao MAIS expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expressao ::= expressao MENOS expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expressao ::= expressao DIVIDIR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expressao ::= expressao MULTIPLICAR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expressao ::= expressao MOD expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expressao ::= MENOS expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expressao ::= expressao OR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expressao ::= expressao AND expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expressao ::= expressao MAIOR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expressao ::= expressao MENOR expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expressao ::= expressao MAIOR_IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expressao ::= expressao MENOR_IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expressao ::= expressao IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expressao ::= expressao DIFERENTE expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expressao ::= expressao INTERROGACAO expressao DOIS_PONTOS expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametroChamada ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroChamada",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametroChamada ::= expressao auxiliarParametroChamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametroChamada",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // auxiliarParametroChamada ::= VIRGULA parametroChamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("auxiliarParametroChamada",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametro ::= tipo ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametro ::= tipo ID ABRECOLCHETES FECHACOLCHETES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // seqParametro ::= parametro VIRGULA seqParametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqParametro",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // seqParametro ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqParametro",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
