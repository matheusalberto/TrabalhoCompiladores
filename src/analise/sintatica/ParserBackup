//Vai na pasta onde tao .flex e execute este comando pelo terminal
//java -jar jflex-1.6.1.jar Lexer.flex

//Vai na pasta onde tao .cup e execute este comando pelo terminal
//java -jar java-cup-11b.jar -parser Parser -symbols Sym Parser.cup

package analise.sintatica;

import analise.semantica.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:

	public void syntax_error(Symbol cur_token) {
	  done_parsing();
	  System.out.printf("Erro de sintaxe na linha %d, coluna %d. \n", cur_token.left + 1, cur_token.right);
	  System.out.printf("Token (%s) inesperado. \n", (String)cur_token.value);
    }

    //public void report_error(String message, Object info)  {
    //    System.out.println("Warning - " + message);
    //}

    //public void report_fatal_error(String message, Object info)  {
    //    System.out.println("Error - " + message);
    //    System.exit(-1);
    //}

:};
terminal String OPERADOR_BOOLEANO, ID, NUMERO, STRING;
terminal 
MAIS, 
MENOS, 
UMENOS, 
DIVIDIR, 
MULTIPLICAR, 
MOD,
OR, 
AND, 
NEGACAO,
INTERROGACAO,
MAIOR, 
MENOR, 
IGUAL, 
DIFERENTE, 
MAIOR_IGUAL, 
MENOR_IGUAL,
OPERADOR_ATRIBUICAO_MAIS_RECEBE,
OPERADOR_ATRIBUICAO_MENOS_RECEBE,
OPERADOR_ATRIBUICAO_VEZES_RECEBE,
OPERADOR_ATRIBUICAO_DIVIDIR_RECEBE,
OPERADOR_ATRIBUICAO_MOD_RECEBE,
OPERADOR_ATRIBUICAO_RECEBE,
DOIS_PONTOS,
BREAK,
ELSE,
FOR,
IF,
RETURN,
WHILE,
BOOL,
INT,
TIPO_STRING,
WRITE,
READ,
ABREPARENTESES,
FECHAPARENTESES,
ABRECOLCHETES, 
FECHACOLCHETES,
ABRECHAVES, 
FECHACHAVES,
VIRGULA,
PONTOEVIRGULA;

non terminal Programa programa;
non terminal declaracao;
non terminal Declaracao declaracaoFuncao;
non terminal Declaracao declaracaoProcedimento;
non terminal Declaracao decVar;
non terminal SpecVar specVar;
non terminal Tipo tipo;
non terminal Parametro parametro;
non terminal Bloco bloco;
non terminal comando;
non terminal Comando comandoIf;
non terminal Comando comandoWhile;
non terminal Comando comandoFor;
non terminal Comando interrupcaoDeLaco;
non terminal Comando read;
non terminal Comando write;
non terminal Comando retornoSubprograma;
non terminal Chamada chamada;
non terminal Comando comandoAtribuicao;
non terminal Variavel variavel;
non terminal Expressao expressao;
non terminal Literal literal;
non terminal List<Parametro> listaParametro;
non terminal List<SpecVar> specVarSeq;
non terminal List<Declaracao> declaracoes;
non terminal List<Comando> comandos;
non terminal List<Literal> seqLiteral;
non terminal List<Expressao> listaExpressoes;

/* PrecedÃªncias */
precedence right INTERROGACAO, DOIS_PONTOS;
precedence left OR;
precedence left AND;
precedence left IGUAL, DIFERENTE;
precedence left MENOR, MENOR_IGUAL, MAIOR, MAIOR_IGUAL;
precedence left MAIS, MENOS;
precedence left MULTIPLICAR, DIVIDIR, MOD;
precedence right NEGACAO;
precedence right UMENOS;

start with programa;

programa ::= declaracoes:decList {: RESULT = new Programa(decList); :}
;

declaracao ::= decVar 
| declaracaoFuncao
| declaracaoProcedimento;

declaracaoFuncao ::= tipo:t ID:id ABREPARENTESES listaParametro:list FECHAPARENTESES ABRECHAVES bloco:b FECHACHAVES                                                                 {: RESULT = Declaracao.declaracaoFuncaoComParametro(t,id,list,b); :}
| tipo:t ID:id ABREPARENTESES FECHAPARENTESES ABRECHAVES bloco:b FECHACHAVES                                                                                                        {: RESULT = Declaracao.declaracaoFuncaoSemParametro(t,id,b); :}
;

declaracaoProcedimento ::= ID:id ABREPARENTESES listaParametro:list FECHAPARENTESES ABRECHAVES bloco:b FECHACHAVES                                                                  {: RESULT = Declaracao.declaracaoProcedimentoComParametro(id,list,b); :}
| ID:id ABREPARENTESES FECHAPARENTESES ABRECHAVES bloco:b FECHACHAVES                                                                                                               {: RESULT = Declaracao.declaracaoProcedimentoSemParametro(id,b); :}
;

decVar ::= tipo:t specVarSeq:svs PONTOEVIRGULA    {: RESULT = Declaracao._decVar(t,svs); :}
;

specVar ::= ID:id                                                                                                   {: RESULT = SpecVar.id(id); :}
| ID:id OPERADOR_ATRIBUICAO_RECEBE literal:lit                                                                      {: RESULT = SpecVar.idAtribuicao(id,lit); :}
| ID:id ABRECOLCHETES NUMERO:num FECHACOLCHETES                                                                     {: RESULT = SpecVar.idArray(id,num); :}
| ID:id ABRECOLCHETES NUMERO:num FECHACOLCHETES OPERADOR_ATRIBUICAO_RECEBE ABRECHAVES seqLiteral:list FECHACHAVES   {: RESULT = SpecVar.idArrayAtribuicao(id,num,list); :}
;

tipo ::= TIPO_STRING:str            {: RESULT = Tipo.tipoString(str); :}
| INT:int                           {: RESULT = Tipo.tipoInt(int); :}
| BOOL:bool                         {: RESULT = Tipo.tipoBoolean(bool); :}
;

parametro ::= tipo:t ID:id                      {: RESULT = Parametro.parametro(t,id); :}
| tipo:t ID:id ABRECOLCHETES FECHACOLCHETES     {: RESULT = Parametro.parametroArray(t,id); :}
;

bloco ::= declaracoes:dec comandos:com   {: RESULT = Bloco.decVarListComandos(dec,com); :}
| declaracoes:dvl                        {: RESULT = Bloco.decVarList(dec); :}
| comandos:com                          {: RESULT = Bloco.comandos(comandos); :}
;

comando ::= comandoIf 
| comandoFor
| comandoWhile
| comandoAtribuicao PONTOEVIRGULA
| retornoSubprograma
| interrupcaoDeLaco
| chamada PONTOEVIRGULA
| read
| write;

comandoIf ::= IF ABREPARENTESES expressao:exp FECHAPARENTESES ABRECHAVES bloco:bloco1 FECHACHAVES                                                                                   {: RESULT = Comando._if(exp, bloco1); :}
| IF ABREPARENTESES expressao:exp FECHAPARENTESES ABRECHAVES bloco:bloco1 FECHACHAVES ELSE ABRECHAVES bloco:bloco2 FECHACHAVES                                                      {: RESULT = Comando._ifElse(exp, bloco1, bloco2); :}
;

comandoWhile ::= WHILE ABREPARENTESES expressao:exp FECHAPARENTESES ABRECHAVES bloco:bloco FECHACHAVES      {: RESULT = Comando._while(exp, bloco); :}
;

comandoFor ::= FOR ABREPARENTESES comandoAtribuicao:c1 PONTOEVIRGULA expressao:exp PONTOEVIRGULA comandoAtribuicao:c2 FECHAPARENTESES ABRECHAVES bloco:b FECHACHAVES                {: RESULT = Comando._for(c1, exp, c2, b); :}
;

interrupcaoDeLaco ::= BREAK PONTOEVIRGULA           {: RESULT = Comando.interrupcao(Sym.BREAK); :}
;

read ::= READ variavel:var PONTOEVIRGULA            {: RESULT = Comando.read(var); :}
;

write ::= WRITE listaExpressoes:list PONTOEVIRGULA  {: RESULT = Comando.write(list); :}
;

retornoSubprograma ::= RETURN PONTOEVIRGULA         {: RESULT = Comando._retorno(Sym.RETURN); :}
| RETURN expressao:exp PONTOEVIRGULA                {: RESULT = Comando._retornoExp(Sym.RETURN, exp); :}
;

chamada ::= ID:ident ABREPARENTESES listaExpressoes:expList FECHAPARENTESES     {: RESULT = Chamada.chamadaParametro(ident, expList); :}
| ID:ident ABREPARENTESES FECHAPARENTESES                                       {: RESULT = Chamada.chamadaSemParametro(ident); :}
;

comandoAtribuicao ::= 
variavel:var OPERADOR_ATRIBUICAO_MAIS_RECEBE expressao:exp  {: RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_MAIS_RECEBE ,exp); :}
| variavel OPERADOR_ATRIBUICAO_MENOS_RECEBE expressao       {: RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_MENOS_RECEBE ,exp); :}
| variavel OPERADOR_ATRIBUICAO_VEZES_RECEBE expressao       {: RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_VEZES_RECEBE ,exp); :}
| variavel OPERADOR_ATRIBUICAO_DIVIDIR_RECEBE expressao     {: RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_DIVIDIR_RECEBE ,exp); :}
| variavel OPERADOR_ATRIBUICAO_MOD_RECEBE expressao         {: RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_MOD_RECEBE ,exp); :}
| variavel OPERADOR_ATRIBUICAO_RECEBE expressao             {: RESULT = Comando.atribuicao(var, Sym.OPERADOR_ATRIBUICAO_RECEBE ,exp); :}
;

variavel ::= ID:ident                                           {: RESULT = Variavel.id(ident); :}
| ID:ident ABRECOLCHETES expressao:exp FECHACOLCHETES           {: RESULT = Variavel.idArray(ident, exp); :}
;            

expressao ::= literal:lit                                                   {: RESULT = Expressao.literal(lit); :}
| variavel:var                                                              {: RESULT = Expressao.variavel(var); :} 
| chamada:cha                                                               {: RESULT = Expressao.chamada(cha); :} 
| NEGACAO expressao:exp1                                                    {: RESULT = Expressao.unop(Sym.NEGACAO, exp1); :}
| ABREPARENTESES expressao:exp1 FECHAPARENTESES                             {: RESULT = exp1; :} 
| expressao:exp1 MAIS expressao:exp2                                        {: RESULT = Expressao.binop(exp1,Sym.MAIS,exp2); :} 
| expressao:exp1 MENOS expressao:exp2                                       {: RESULT = Expressao.binop(exp1,Sym.MENOS,exp2); :} 
| expressao:exp1 DIVIDIR expressao:exp2                                     {: RESULT = Expressao.binop(exp1,Sym.DIVIDIR,exp2); :}
| expressao:exp1 MULTIPLICAR expressao:exp2                                 {: RESULT = Expressao.binop(exp1,Sym.MULTIPLICAR,exp2); :}
| expressao:exp1 MOD expressao:exp2                                         {: RESULT = Expressao.binop(exp1,Sym.MOD,exp2); :}
| MENOS expressao:exp1                                                      {: RESULT = Expressao.unop(Sym.MENOS, exp1); :}  %prec UMENOS
| expressao:exp1 OR expressao:exp2                                          {: RESULT = Expressao.binop(exp1,Sym.OR,exp2); :}
| expressao:exp1 AND expressao:exp2                                         {: RESULT = Expressao.binop(exp1,Sym.AND,exp2); :}
| expressao:exp1 MAIOR expressao:exp2                                       {: RESULT = Expressao.binop(exp1,Sym.MAIOR,exp2); :}
| expressao:exp1 MENOR expressao:exp2                                       {: RESULT = Expressao.binop(exp1,Sym.MENOR,exp2); :}
| expressao:exp1 MAIOR_IGUAL expressao:exp2                                 {: RESULT = Expressao.binop(exp1,Sym.MAIOR_IGUAL,exp2); :}
| expressao:exp1 MENOR_IGUAL expressao:exp2                                 {: RESULT = Expressao.binop(exp1,Sym.MENOR_IGUAL,exp2); :}
| expressao:exp1 IGUAL expressao:exp2                                       {: RESULT = Expressao.binop(exp1,Sym.IGUAL,exp2); :}
| expressao:exp1 DIFERENTE expressao:exp2                                   {: RESULT = Expressao.binop(exp1,Sym.DIFERENTE,exp2); :}
| expressao:exp1 INTERROGACAO expressao:exp2 DOIS_PONTOS expressao:exp3     {: RESULT = Expressao.ternop(exp1,exp2, exp3); :}
;

literal ::= NUMERO:numStr       {: RESULT = Literal.numero(numStr); :}     
| STRING:str                    {: RESULT = Literal.string(str); :}
| OPERADOR_BOOLEANO:boolStr     {: RESULT = Literal.bool(boolStr); :}
;

listaParametro ::= parametro:par VIRGULA listaParametro:parList         {: parList.add(par); RESULT = parList; :}
| parametro:par                                                         {:  List<Parametro> lista = new ArrayList<>();
                                                                            lista.add(par); RESULT = lista; :}
;

specVarSeq ::= specVar:sVar VIRGULA specVarSeq:sVarList                 {: sVarList.add(sVar); RESULT = sVarList; :}
| specVar:sVar                                                         {:  List<SpecVar> lista = new ArrayList<>();
                                                                            lista.add(sVar); RESULT = lista; :}
;

declaracoes ::= declaracao:dec declaracoes:decList                      {: decList.add(dec); RESULT = decList; :}
| declaracao:dec                                                        {:  List<Declaracao> lista = new ArrayList<>();
                                                                            lista.add(dec); RESULT = lista; :}
;                    

comandos ::= comando:com comandos:comList                               {: comList.add(com); RESULT = comList; :}
| comando:com                                                           {:  List<Comando> lista = new ArrayList<>();
                                                                            lista.add(com); RESULT = lista; :}
;

seqLiteral ::= literal:lit seqLiteral:litList                           {: litList.add(lit); RESULT = litList; :}
| literal:lit                                                           {:  List<Literal> lista = new ArrayList<>();
                                                                            lista.add(lit); RESULT = lista; :}
;

listaExpressoes ::= expressao:exp VIRGULA listaExpressoes:expList       {: expList.add(exp); RESULT = expList; :}
| expressao:exp                                                         {:  List<Expressao> lista = new ArrayList<>();
                                                                            lista.add(exp); RESULT = lista; :}
;